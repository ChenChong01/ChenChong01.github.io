<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSH常用指令</title>
      <link href="/2022/07/06/ssh-chang-yong-zhi-ling/"/>
      <url>/2022/07/06/ssh-chang-yong-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h2><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>远程登录服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>user</strong>: 用户名</li><li><strong>hostname</strong>: IP地址或域名</li></ul><p>第一次登录时会提示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">The authenticity of <span class="token function">host</span> <span class="token string">'123.57.47.211 (123.57.47.211)'</span> can't be established.ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8.Are you sure you want to <span class="token builtin class-name">continue</span> connecting <span class="token punctuation">(</span>yes/no/<span class="token punctuation">[</span>fingerprint<span class="token punctuation">]</span><span class="token punctuation">)</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入<strong>yes</strong>，然后回车即可。<br>这样会将该服务器的信息记录在**~/.ssh/known_hosts**文件中。</p><p>然后输入密码即可登录到远程服务器中。</p><p>默认登录端口号为22。如果想登录某一特定端口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@hostname -p <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>创建文件 <strong>~/.ssh/config</strong>。</p><p>然后在文件中输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host myserver1    HostName IP地址或域名    User 用户名Host myserver2    HostName IP地址或域名    User 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再使用服务器时，可以直接使用别名<strong>myserver1</strong>、<strong>myserver2</strong>。</p><h4 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h4><p>创建密钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后一直回车即可。</p><p>执行结束后，**~/.ssh**/(本地)目录下会多两个文件：</p><ul><li>id_rsa：私钥</li><li>id_rsa.pub：公钥</li></ul><p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p><p>例如，想免密登录<strong>myserver</strong>服务器。则将公钥中的内容，复制到myserver中的**~/.ssh/authorized_keys**文件里即可。</p><p>也可以使用如下命令一键添加公钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id myserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><p>命令格式：</p><pre class="line-numbers language-none"><code class="language-none">ssh user@hostname command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">ssh user@hostname ls -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><p>单引号中的**$i**可以求值</p><pre class="line-numbers language-none"><code class="language-none">ssh myserver 'for ((i = 0; i &lt; 10; i ++ )) do echo $i; done'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但</p><p>双引号中的**$i**不可以求值</p><pre class="line-numbers language-none"><code class="language-none">ssh myserver "for ((i = 0; i &lt; 10; i ++ )) do echo $i; done"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="scp传文件"><a href="#scp传文件" class="headerlink" title="scp传文件"></a>scp传文件</h2><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>命令格式：</p><pre class="line-numbers language-none"><code class="language-none">scp source destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将<strong>source</strong>路径下的文件复制到<strong>destination</strong>中</p><hr><p>一次复制多个文件：</p><pre class="line-numbers language-none"><code class="language-none">scp source1 source2 destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>复制文件夹：</p><pre class="line-numbers language-none"><code class="language-none">scp -r ~/tmp myserver:/home/acs/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将本地家目录中的<strong>tmp</strong>文件夹复制到<strong>myserver</strong>服务器中的**/home/acs/**目录下。</p><pre class="line-numbers language-none"><code class="language-none">scp -r ~/tmp myserver:homework/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将本地家目录中的<strong>tmp</strong>文件夹复制到<strong>myserver</strong>服务器中的**~/homework/**目录下。</p><pre class="line-numbers language-none"><code class="language-none">scp -r myserver:homework .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将<strong>myserver</strong>服务器中的**~/homework/**文件夹复制到本地的当前路径下。</p><hr><p>指定服务器的端口号：</p><pre class="line-numbers language-none"><code class="language-none">scp -P 22 source1 source2 destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>注意： <strong>scp</strong>的**-r  -P<strong>等参数尽量加在</strong>source<strong>和</strong>destination**之前。</p><hr><p>使用<strong>scp</strong>配置其他服务器的<strong>vim</strong>和<strong>tmux</strong></p><pre class="line-numbers language-none"><code class="language-none">scp ~/.vimrc ~/.tmux.conf myserver:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell语法</title>
      <link href="/2022/07/04/shell-yu-fa/"/>
      <url>/2022/07/04/shell-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>shell是我们通过命令行与操作系统沟通的语言。</p><p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。<br>AC Terminal中的命令行可以看成是一个“<strong>shell脚本在逐行执行</strong>”。</p><p>Linux中常见的shell脚本有很多种，常见的有：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Bourne Shell<span class="token punctuation">(</span>/usr/bin/sh或/bin/sh<span class="token punctuation">)</span>Bourne Again Shell<span class="token punctuation">(</span>/bin/bash<span class="token punctuation">)</span>C Shell<span class="token punctuation">(</span>/usr/bin/csh<span class="token punctuation">)</span>K Shell<span class="token punctuation">(</span>/usr/bin/ksh<span class="token punctuation">)</span><span class="token function">zsh</span>…<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Linux系统中一般默认使用bash，所以接下来讲解bash中的语法。<br>文件开头需要写**#! /bin/bash**，指明bash为脚本解释器。</p><h4 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例"></a>脚本示例</h4><p>新建一个<strong>test.sh</strong>文件，内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello World!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h4><p>作为可执行文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">chmod</span> +x test.sh  <span class="token comment"># 使脚本具有可执行权限</span>acs@9e0ebfcd82d7:~$ ./test.sh  <span class="token comment"># 当前路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span>acs@9e0ebfcd82d7:~$ /home/acs/test.sh  <span class="token comment"># 绝对路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span>acs@9e0ebfcd82d7:~$ ~/test.sh  <span class="token comment"># 家目录路径下执行</span>Hello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用解释器执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">bash</span> test.shHello World<span class="token operator">!</span>  <span class="token comment"># 脚本输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">r <span class="token comment">#可读</span>w <span class="token comment">#可写</span>x <span class="token comment">#可执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>每行中**#**之后的内容均是注释。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这是一行注释</span><span class="token builtin class-name">echo</span> <span class="token string">'Hello World'</span>  <span class="token comment">#  这也是注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:<span class="token operator">&lt;&lt;</span><span class="token string">EOF第一行注释第二行注释第三行注释EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中EOF可以换成其它任意字符串。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:<span class="token operator">&lt;&lt;</span><span class="token string">abc第一行注释第二行注释第三行注释abc</span>:<span class="token operator">&lt;&lt;</span><span class="token operator">!</span>第一行注释第二行注释第三行注释<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>定义变量，不需要加**$**符号，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name1</span><span class="token operator">=</span><span class="token string">'yxc'</span>  <span class="token comment"># 单引号定义字符串</span><span class="token assign-left variable">name2</span><span class="token operator">=</span><span class="token string">"yxc"</span>  <span class="token comment"># 双引号定义字符串</span><span class="token assign-left variable">name3</span><span class="token operator">=</span>yxc    <span class="token comment"># 也可以不加引号，同样表示字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><p>使用变量，需要加上**$<strong>符号，或者</strong>${}**符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出yxc</span><span class="token builtin class-name">echo</span> <span class="token variable">${name}</span>  <span class="token comment"># 输出yxc</span><span class="token builtin class-name">echo</span> <span class="token variable">${name}</span>acwing  <span class="token comment"># 输出yxcacwing</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>使用<strong>readonly</strong>或者<strong>declare</strong>可以将变量变为只读。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc<span class="token builtin class-name">readonly</span> name<span class="token builtin class-name">declare</span> -r name  <span class="token comment"># 两种写法均可</span><span class="token assign-left variable">name</span><span class="token operator">=</span>abc  <span class="token comment"># 会报错，因为此时name只读</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p><strong>unset</strong>可以删除变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc<span class="token builtin class-name">unset</span> name<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出空行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><p>​    1.自定义变量（局部变量）<br>​       子进程不能访问的变量<br>​    2.环境变量（全局变量）<br>​       子进程可以访问的变量<br>自定义变量改成环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token assign-left variable">name</span><span class="token operator">=</span>yxc  <span class="token comment"># 定义变量</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">export</span> name  <span class="token comment"># 第一种方法</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">declare</span> -x name  <span class="token comment"># 第二种方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>环境变量改为自定义变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>yxc  <span class="token comment"># 定义环境变量</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">declare</span> +x name  <span class="token comment"># 改为自定义变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p>单引号与双引号的区别：</p><ul><li><p>单引号中的内容会原样输出，不会执行、不会取变量；</p></li><li><p>双引号中的内容可以执行、可以取变量；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc  <span class="token comment"># 不用引号</span><span class="token builtin class-name">echo</span> <span class="token string">'hello, $name \"hh\"'</span>  <span class="token comment"># 单引号字符串，输出 hello, $name \"hh\"</span><span class="token builtin class-name">echo</span> <span class="token string">"hello, <span class="token variable">$name</span> <span class="token entity" title="\&quot;">\"</span>hh<span class="token entity" title="\&quot;">\"</span>"</span>  <span class="token comment"># 双引号字符串，输出 hello, yxc "hh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>获取字符串长度</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"yxc"</span><span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token operator">#</span>name}</span>  <span class="token comment"># 输出3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提取子串</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"hello, yxc"</span><span class="token builtin class-name">echo</span> <span class="token variable">${name<span class="token operator">:</span>0<span class="token operator">:</span>5}</span>  <span class="token comment"># 提取从0开始的5个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h2><h4 id="文件参数变量"><a href="#文件参数变量" class="headerlink" title="文件参数变量"></a>文件参数变量</h4><p>在执行shell脚本时，可以向脚本传递参数。**$1<strong>是第一个参数</strong>，$2<strong>是第二个参数，以此类推。特殊的，</strong>$0**是文件名（包含路径）。例如：</p><p>创建文件<strong>test.sh</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"文件名："</span><span class="token variable">$0</span><span class="token builtin class-name">echo</span> <span class="token string">"第一个参数："</span><span class="token variable">$1</span><span class="token builtin class-name">echo</span> <span class="token string">"第二个参数："</span><span class="token variable">$2</span><span class="token builtin class-name">echo</span> <span class="token string">"第三个参数："</span><span class="token variable">$3</span><span class="token builtin class-name">echo</span> <span class="token string">"第四个参数："</span><span class="token variable">$4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行该脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">chmod</span> +x test.sh acs@9e0ebfcd82d7:~$ ./test.sh <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>文件名：./test.sh第一个参数：1第二个参数：2第三个参数：3第四个参数：4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其它参数相关变量"><a href="#其它参数相关变量" class="headerlink" title="其它参数相关变量"></a>其它参数相关变量</h4><table><thead><tr><th>参数</th><th align="left">说明</th></tr></thead><tbody><tr><td>$#</td><td align="left">代表文件传入的参数个数，如上例中值为4</td></tr><tr><td>$*</td><td align="left">由所有参数构成的用空格隔开的字符串，如上例中值为”$1 $2 $3 $4”</td></tr><tr><td>$@</td><td align="left">每个参数分别用双引号括起来的字符串，如上例中值为”$1” “$2” “$3” “$4”</td></tr><tr><td>$$</td><td align="left">脚本当前运行的进程ID</td></tr><tr><td>$?</td><td align="left">上一条命令的退出状态（注意不是stdout，而是exit code）。0表示正常退出，其他值表示错误</td></tr><tr><td>$(command)</td><td align="left">返回command这条命令的stdout（可嵌套）</td></tr><tr><td>command</td><td align="left">返回command这条命令的stdout（不可嵌套）</td></tr></tbody></table><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。<br>数组<strong>下标从0开始</strong>。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>数组用小括号表示，元素之间用空格隔开。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> yxc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以直接定义数组中某个元素的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>abcarray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"def"</span>array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>yxc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="读取数组中某个元素的值"><a href="#读取数组中某个元素的值" class="headerlink" title="读取数组中某个元素的值"></a>读取数组中某个元素的值</h4><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">${array<span class="token punctuation">[</span>index<span class="token punctuation">]</span>}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> yxc<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">${array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span><span class="token builtin class-name">echo</span> <span class="token variable">${array<span class="token punctuation">[</span>1<span class="token punctuation">]</span>}</span><span class="token builtin class-name">echo</span> <span class="token variable">${array<span class="token punctuation">[</span>2<span class="token punctuation">]</span>}</span><span class="token builtin class-name">echo</span> <span class="token variable">${array<span class="token punctuation">[</span>3<span class="token punctuation">]</span>}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="读取整个数组"><a href="#读取整个数组" class="headerlink" title="读取整个数组"></a>读取整个数组</h4><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">${array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第一种写法</span><span class="token variable">${array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> yxc<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">${array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第一种写法</span><span class="token builtin class-name">echo</span> <span class="token variable">${array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><p>类似于字符串</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第一种写法</span><span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> abc <span class="token string">"def"</span> yxc<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第一种写法</span><span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>  <span class="token comment"># 第二种写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h2><p><strong>expr</strong>命令用于求表达式的值，格式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">expr</span> 表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表达式说明：</p><ul><li>用空格隔开每一项</li><li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li><li><strong>expr</strong>会在<strong>stdout</strong>中输出结果。如果为逻辑关系表达式，则结果为真，<strong>stdout</strong>为1，否则为0。</li><li><strong>expr</strong>的<strong>exit code</strong>：如果为逻辑关系表达式，则结果为真，<strong>exit code</strong>为0，否则为1。</li></ul><h4 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h4><ul><li><p>length STRING</p><p>返回STRING的长度</p></li><li><p>index STRING CHARSET<br>CHARSET中任意单个字符在STRING中最前面的字符位置，下标从1开始。如果在STRING中完全不存在CHARSET中的字符，则返回0。</p></li><li><p>substr STRING POSITION LENGTH<br>返回STRING字符串中从POSITION开始，长度最大为LENGTH的子串。如果POSITION或LENGTH为负数，0或非数值，则返回空字符串。</p></li></ul><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> length <span class="token string">"<span class="token variable">$str</span>"</span><span class="token variable">`</span></span>  <span class="token comment"># ``不是单引号，表示执行该命令，输出12</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> index <span class="token string">"<span class="token variable">$str</span>"</span> aWd<span class="token variable">`</span></span>  <span class="token comment"># 输出7，下标从1开始</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> substr <span class="token string">"<span class="token variable">$str</span>"</span> <span class="token number">2</span> <span class="token number">3</span><span class="token variable">`</span></span>  <span class="token comment"># 输出 ell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a>整数表达式</h4><p>expr支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p><ul><li>+-<br>加减运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li>*/ %<br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</li></ul><ul><li>() 可以该表优先级，但需要用反斜杠转义</li></ul><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + $b<span class="token variable">`</span></span>  <span class="token comment"># 输出7</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a - $b<span class="token variable">`</span></span>  <span class="token comment"># 输出-1</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span>* $b<span class="token variable">`</span></span>  <span class="token comment"># 输出12，*需要转义</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a / $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0，整除</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a % $b<span class="token variable">`</span></span> <span class="token comment"># 输出3</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token punctuation">\</span><span class="token punctuation">(</span> $a + <span class="token number">1</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token punctuation">\</span>* <span class="token punctuation">\</span><span class="token punctuation">(</span> $b + <span class="token number">1</span> <span class="token punctuation">\</span><span class="token punctuation">)</span><span class="token variable">`</span></span>  <span class="token comment"># 输出20，值为(a + 1) * (b + 1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逻辑关系表达式"><a href="#逻辑关系表达式" class="headerlink" title="逻辑关系表达式"></a>逻辑关系表达式</h4><ul><li>|<br>如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</li><li>&amp;<br>如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</li><li>&lt; &lt;= = == != &gt;= &gt;<br>比较两端的参数，如果为true，则返回1，否则返回0。”==”是”=”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</li><li>() 可以该表优先级，但需要用反斜杠转义</li></ul><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">&gt;</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0，&gt;需要转义</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token string">'&lt;'</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出1，也可以将特殊字符用引号引起来</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token string">'&gt;='</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出0</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">&lt;</span><span class="token punctuation">\</span><span class="token operator">=</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出1</span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token number">5</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c <span class="token punctuation">\</span><span class="token operator">&amp;</span> $d<span class="token variable">`</span></span>  <span class="token comment"># 输出0</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">&amp;</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出3</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $c <span class="token punctuation">\</span><span class="token operator">|</span> $d<span class="token variable">`</span></span>  <span class="token comment"># 输出5</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a <span class="token punctuation">\</span><span class="token operator">|</span> $b<span class="token variable">`</span></span>  <span class="token comment"># 输出3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h2><p>read命令用于从标准输入中读取单行数据。当读到文件结束符时，exit code为1，否则为0。</p><p>参数说明</p><ul><li>-p: 后面可以接提示信息</li><li>-t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</li></ul><p>实例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">read</span> name  <span class="token comment"># 读入name的值</span>acwing yxc  <span class="token comment"># 标准输入</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出name的值</span>acwing yxc  <span class="token comment">#标准输出</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">read</span> -p <span class="token string">"Please input your name: "</span> -t <span class="token number">30</span> name  <span class="token comment"># 读入name的值，等待时间30秒</span>Please input your name: acwing yxc  <span class="token comment"># 标准输入</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$name</span>  <span class="token comment"># 输出name的值</span>acwing yxc  <span class="token comment"># 标准输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p><strong>echo</strong>用于输出字符串。命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> STRING<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a>显示普通字符串</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello AC Terminal"</span><span class="token builtin class-name">echo</span> Hello AC Terminal  <span class="token comment"># 引号可以省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token entity" title="\&quot;">\"</span>Hello AC Terminal<span class="token entity" title="\&quot;">\"</span>"</span>  <span class="token comment"># 注意只能使用双引号，如果使用单引号，则不转义</span><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>"Hello AC Terminal<span class="token punctuation">\</span>"  <span class="token comment"># 也可以省略双引号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc<span class="token builtin class-name">echo</span> <span class="token string">"My name is <span class="token variable">$name</span>"</span>  <span class="token comment"># 输出 My name is yxc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a>显示换行</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -e <span class="token string">"Hi<span class="token entity" title="\n">\n</span>"</span>  <span class="token comment"># -e 开启转义</span><span class="token builtin class-name">echo</span> <span class="token string">"acwing"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">Hiacwing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a>显示不换行</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -e <span class="token string">"Hi <span class="token entity" title="\c">\c</span>"</span> <span class="token comment"># -e 开启转义 \c 不换行</span><span class="token builtin class-name">echo</span> <span class="token string">"acwing"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">Hi acwing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a>显示结果定向至文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello World"</span> <span class="token operator">&gt;</span> output.txt  <span class="token comment"># 将内容以覆盖的方式输出到output.txt中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="原样输出字符串，不进行转义或取变量-用单引号"><a href="#原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="原样输出字符串，不进行转义或取变量(用单引号)"></a>原样输出字符串，不进行转义或取变量(用单引号)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>acwing<span class="token builtin class-name">echo</span> <span class="token string">'$name\"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-none"><code class="language-none">$name\"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示命令的执行结果"><a href="#显示命令的执行结果" class="headerlink" title="显示命令的执行结果"></a>显示命令的执行结果</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">Wed Sep 1 11:45:33 CST 2021<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h2><p><strong>printf</strong>命令用于格式化输出，类似于C/C++中的printf函数。</p><p>默认<strong>不会在字符串末尾添加换行符</strong>。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> format-string <span class="token punctuation">[</span>arguments<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h4><p>脚本内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">printf</span> <span class="token string">"%10d.<span class="token entity" title="\n">\n</span>"</span> <span class="token number">123</span>  <span class="token comment"># 占10位，右对齐</span><span class="token builtin class-name">printf</span> <span class="token string">"%-10.2f.<span class="token entity" title="\n">\n</span>"</span> <span class="token number">123.123321</span>  <span class="token comment"># 占10位，保留2位小数，左对齐</span><span class="token builtin class-name">printf</span> <span class="token string">"My name is %s<span class="token entity" title="\n">\n</span>"</span> <span class="token string">"yxc"</span>  <span class="token comment"># 格式化输出字符串</span><span class="token builtin class-name">printf</span> <span class="token string">"%d * %d = %d<span class="token entity" title="\n">\n</span>"</span>  <span class="token number">2</span> <span class="token number">3</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> <span class="token punctuation">\</span>* <span class="token number">3</span><span class="token variable">`</span></span> <span class="token comment"># 表达式的值作为参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">          123.123.12    .My name is yxc2 * 3 = 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="test命令与判断符号"><a href="#test命令与判断符号" class="headerlink" title="test命令与判断符号[]"></a>test命令与判断符号[]</h2><h4 id="逻辑运算符-amp-amp-和"><a href="#逻辑运算符-amp-amp-和" class="headerlink" title="逻辑运算符&amp;&amp;和||"></a>逻辑运算符&amp;&amp;和||</h4><ul><li>&amp;&amp; 表示与，|| 表示或</li><li>二者具有短路原则：<br>expr1 &amp;&amp; expr2：当expr1为假时，直接忽略expr2<br>expr1 || expr2：当expr1为真时，直接忽略expr2</li><li>表达式的exit code为0，表示真；为非零，表示假。（与C/C++中的定义相反）</li></ul><h4 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h4><p>在命令行中输入man test，可以查看test命令的用法。</p><p>test命令用于判断文件类型，以及对变量做比较。</p><p>test命令用exit code返回结果，而不是使用stdout。0表示真，非0表示假。</p><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token number">2</span> -lt <span class="token number">3</span>  <span class="token comment"># 为真，返回值为0</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出上个命令的返回值，输出0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">ls</span>  <span class="token comment"># 列出当前目录下的所有文件</span>homework  output.txt  test.sh  tmpacs@9e0ebfcd82d7:~$ <span class="token builtin class-name">test</span> -e test.sh <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>exist  <span class="token comment"># test.sh 文件存在</span>acs@9e0ebfcd82d7:~$ <span class="token builtin class-name">test</span> -e test2.sh <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>Not exist  <span class="token comment"># testh2.sh 文件不存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件类型判断"><a href="#文件类型判断" class="headerlink" title="文件类型判断"></a>文件类型判断</h4><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> -e filename  <span class="token comment"># 判断文件是否存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">测试参数</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">-e</td><td align="center">文件是否存在</td></tr><tr><td align="center">-f</td><td align="center">是否为文件</td></tr><tr><td align="center">-d</td><td align="center">是否为目录</td></tr></tbody></table><h4 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a>文件权限判断</h4><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> -r filename  <span class="token comment"># 判断文件是否可读</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">测试参数</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">-r</td><td align="center">文件是否可读</td></tr><tr><td align="center">-w</td><td align="center">文件是否可写</td></tr><tr><td align="center">-x</td><td align="center">文件是否可执行</td></tr><tr><td align="center">-s</td><td align="center">是否为非空文件</td></tr></tbody></table><h4 id="整数间的比较"><a href="#整数间的比较" class="headerlink" title="整数间的比较"></a>整数间的比较</h4><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token variable">$a</span> -eq <span class="token variable">$b</span>  <span class="token comment"># a是否等于b</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">测试参数</th><th align="center">代表意义</th></tr></thead><tbody><tr><td align="center">-eq</td><td align="center">a是否等于b</td></tr><tr><td align="center">-ne</td><td align="center">a是否不等于b</td></tr><tr><td align="center">-gt</td><td align="center">a是否大于b</td></tr><tr><td align="center">-lt</td><td align="center">a是否小于b</td></tr><tr><td align="center">-ge</td><td align="center">a是否大于等于b</td></tr><tr><td align="center">-le</td><td align="center">a是否小于等于b</td></tr></tbody></table><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>test -z STRING</td><td>判断STRING是否为空，如果为空，则返回true</td></tr><tr><td>test -n STRING</td><td>判断STRING是否非空，如果非空，则返回true（-n可以省略）</td></tr><tr><td>test str1 == str2</td><td>判断str1是否等于str2</td></tr><tr><td>test str1 != str2</td><td>判断str1是否不等于str2</td></tr></tbody></table><h4 id="多重条件判定"><a href="#多重条件判定" class="headerlink" title="多重条件判定"></a>多重条件判定</h4><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> -r filename -a -x filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>测试参数</th><th>代表意义</th></tr></thead><tbody><tr><td>-a</td><td>两条件是否同时成立</td></tr><tr><td>-o</td><td>两条件是否至少一个成立</td></tr><tr><td>!</td><td>取反。如 test ! -x file，当file不可执行时，返回true</td></tr></tbody></table><h4 id="判断符号"><a href="#判断符号" class="headerlink" title="判断符号[]"></a>判断符号[]</h4><p><strong>[]<strong>与</strong>test</strong>用法几乎一模一样，更常用于if语句中。另外**[[]]<strong>是</strong>[]**的加强版，支持的特性更多。</p><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token number">2</span> -lt <span class="token number">3</span> <span class="token punctuation">]</span>  <span class="token comment"># 为真，返回值为0</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出上个命令的返回值，输出0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">ls</span>  <span class="token comment"># 列出当前目录下的所有文件</span>homework  output.txt  test.sh  tmpacs@9e0ebfcd82d7:~$ <span class="token punctuation">[</span> -e test.sh <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>exist  <span class="token comment"># test.sh 文件存在</span>acs@9e0ebfcd82d7:~$ <span class="token punctuation">[</span> -e test2.sh <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"exist"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Not exist"</span>Not exist  <span class="token comment"># testh2.sh 文件不存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p>**[]**内的每一项都要用空格隔开<br>中括号内的变量，最好用双引号括起来<br>中括号内的常数，最好用单或双引号括起来<br>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"acwing yxc"</span><span class="token punctuation">[</span> <span class="token variable">$name</span> <span class="token operator">==</span> <span class="token string">"acwing yxc"</span> <span class="token punctuation">]</span>  <span class="token comment"># 错误，等价于 [ acwing yxc == "acwing yxc" ]，参数太多</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$name</span>"</span> <span class="token operator">==</span> <span class="token string">"acwing yxc"</span> <span class="token punctuation">]</span>  <span class="token comment"># 正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h4 id="if…then形式"><a href="#if…then形式" class="headerlink" title="if…then形式"></a>if…then形式</h4><p>类似于C/C++中的if-else语句。</p><h4 id="单层if"><a href="#单层if" class="headerlink" title="单层if"></a>单层if</h4><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> -lt <span class="token string">"<span class="token variable">$b</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> -gt <span class="token number">2</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>在范围内<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">3在范围内<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="单层if-else"><a href="#单层if-else" class="headerlink" title="单层if-else"></a>单层if-else</h4><p>命令格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">else</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$a</span>"</span> -lt <span class="token string">"<span class="token variable">$b</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>不小于<span class="token variable">${b}</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>小于<span class="token variable">${b}</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">3小于4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="多层if-elif-elif-else"><a href="#多层if-elif-elif-else" class="headerlink" title="多层if-elif-elif-else"></a>多层if-elif-elif-else</h4><p>命令格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">elif</span> condition<span class="token keyword">then</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">elif</span> condition<span class="token keyword">then</span>    语句1    语句2<span class="token keyword">else</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -eq <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于1<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -eq <span class="token number">2</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于2<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -eq <span class="token number">3</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于3<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> 其他<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">其他<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="case…esac形式"><a href="#case…esac形式" class="headerlink" title="case…esac形式"></a>case…esac形式</h4><p>类似于C/C++中的switch语句。</p><p>命令格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">case</span> $变量名称 <span class="token keyword">in</span>    值1<span class="token punctuation">)</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment"># 类似于C/C++中的break</span>    值2<span class="token punctuation">)</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>  <span class="token comment"># 类似于C/C++中的default</span>        语句1        语句2        <span class="token punctuation">..</span>.        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">4</span><span class="token keyword">case</span> <span class="token variable">$a</span> <span class="token keyword">in</span>    <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于1        <span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于2        <span class="token punctuation">;</span><span class="token punctuation">;</span>      <span class="token number">3</span><span class="token punctuation">)</span>                                                        <span class="token builtin class-name">echo</span> <span class="token variable">${a}</span>等于3        <span class="token punctuation">;</span><span class="token punctuation">;</span>      *<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> 其他        <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">其他<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h4 id="for…in…do…done"><a href="#for…in…do…done" class="headerlink" title="for…in…do…done"></a>for…in…do…done</h4><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> val1 val2 val3<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例1，输出a 2 cc，每个元素一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> a <span class="token number">2</span> cc<span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例2，输出当前路径下的所有文件名，每个文件名一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$file</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例3，输出1-10</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">1</span> <span class="token number">10</span><span class="token variable">)</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例4，使用{1..10} 或者 {a..z}</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span>a<span class="token punctuation">..</span>z<span class="token punctuation">}</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for-…-…-…-do…done"><a href="#for-…-…-…-do…done" class="headerlink" title="for ((…;…;…)) do…done"></a>for ((…;…;…)) do…done</h4><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>expression<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> expression<span class="token punctuation">))</span></span><span class="token keyword">do</span>    语句1    语句2<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例，输出1-10，每个数占一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="while…do…done循环"><a href="#while…do…done循环" class="headerlink" title="while…do…done循环"></a>while…do…done循环</h4><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> condition<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例，文件结束符为Ctrl+d，输入文件结束符后read指令返回false。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="until…do…done循环"><a href="#until…do…done循环" class="headerlink" title="until…do…done循环"></a>until…do…done循环</h4><p>当条件为真时结束。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">until</span> condition<span class="token keyword">do</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例，当用户输入yes或者YES时结束，否则一直等待读入。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${word}</span>"</span> <span class="token operator">==</span> <span class="token string">"yes"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${word}</span>"</span> <span class="token operator">==</span> <span class="token string">"YES"</span> <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token builtin class-name">read</span> -p <span class="token string">"Please input yes/YES to stop this program: "</span> word<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a>break命令</h4><p>跳出当前一层循环，注意与C/C++不同的是：break不能跳出case语句。</p><p>示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token keyword">do</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>    <span class="token keyword">do</span>        <span class="token keyword">case</span> <span class="token variable">$i</span> <span class="token keyword">in</span>            <span class="token number">8</span><span class="token punctuation">)</span>                <span class="token builtin class-name">break</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>            *<span class="token punctuation">)</span>                <span class="token builtin class-name">echo</span> <span class="token variable">$i</span>                <span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">esac</span>    <span class="token keyword">done</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该示例每读入非EOF的字符串，会输出一遍1-7。<br>该程序可以输入Ctrl+d文件结束符来结束，也可以直接用Ctrl+c杀掉该进程。</p><h4 id="continue命令"><a href="#continue命令" class="headerlink" title="continue命令"></a>continue命令</h4><p>跳出当前循环。</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $i % <span class="token number">2</span><span class="token variable">`</span></span> -eq <span class="token number">0</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">continue</span>    <span class="token keyword">fi</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序输出1-10中的所有奇数。</p><h4 id="死循环的处理方式"><a href="#死循环的处理方式" class="headerlink" title="死循环的处理方式"></a>死循环的处理方式</h4><p>如果AC Terminal可以打开该程序，则输入Ctrl+c即可。</p><p>否则可以直接关闭进程：</p><ul><li>使用top命令找到进程的PID</li><li>输入kill -9 PID即可关掉此进程</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>bash中的函数类似于C/C++中的函数，但return的返回值与C/C++不同，返回的是exit code，取值为0-255，0表示正常结束。</p><p>如果想获取函数的输出结果，可以通过echo输出到stdout中，然后通过$(function_name)来获取stdout中的结果。</p><p>函数的return值可以通过$?来获取。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>function<span class="token punctuation">]</span> <span class="token function-name function">func_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment"># function关键字可以省略</span>    语句1    语句2    <span class="token punctuation">..</span>.<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不获取-return值和stdout值"><a href="#不获取-return值和stdout值" class="headerlink" title="不获取 return值和stdout值"></a>不获取 return值和stdout值</h4><p>示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token assign-left variable">name</span><span class="token operator">=</span>yxc    <span class="token builtin class-name">echo</span> <span class="token string">"Hello <span class="token variable">$name</span>"</span><span class="token punctuation">}</span>func<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">Hello yxc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="获取-return值和stdout值"><a href="#获取-return值和stdout值" class="headerlink" title="获取 return值和stdout值"></a>获取 return值和stdout值</h4><p>不写return时，默认return 0。</p><p>示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token assign-left variable">name</span><span class="token operator">=</span>yxc    <span class="token builtin class-name">echo</span> <span class="token string">"Hello <span class="token variable">$name</span>"</span><span class="token builtin class-name">return</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>func<span class="token variable">)</span></span><span class="token assign-left variable">ret</span><span class="token operator">=</span><span class="token variable">$?</span><span class="token builtin class-name">echo</span> <span class="token string">"output = <span class="token variable">$output</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"return = <span class="token variable">$ret</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">output = Hello yxcreturn = 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="函数的输入参数"><a href="#函数的输入参数" class="headerlink" title="函数的输入参数"></a>函数的输入参数</h4><p>在函数内，**$1<strong>表示第一个输入参数，</strong>$2**表示第二个输入参数，依此类推。</p><p>注意：函数内的**$0**仍然是文件名，而不是函数名。</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment"># 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span>    <span class="token assign-left variable">word</span><span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${word}</span>"</span> <span class="token operator">!=</span> <span class="token string">'y'</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${word}</span>"</span> <span class="token operator">!=</span> <span class="token string">'n'</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token builtin class-name">read</span> -p <span class="token string">"要进入func(<span class="token variable">$1</span>)函数吗？请输入y/n："</span> word    <span class="token keyword">done</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$word</span>"</span> <span class="token operator">==</span> <span class="token string">'n'</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token number">0</span>        <span class="token builtin class-name">return</span> <span class="token number">0</span>    <span class="token keyword">fi</span>      <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> -le <span class="token number">0</span> <span class="token punctuation">]</span>     <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token number">0</span>        <span class="token builtin class-name">return</span> <span class="token number">0</span>    <span class="token keyword">fi</span>      <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>func <span class="token punctuation">$(</span>expr $1 - <span class="token number">1</span><span class="token punctuation">)</span><span class="token variable">)</span></span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $sum + $1<span class="token variable">)</span></span><span class="token punctuation">}</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>func <span class="token number">10</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">55<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="函数内的局部变量"><a href="#函数内的局部变量" class="headerlink" title="函数内的局部变量"></a>函数内的局部变量</h4><p>可以在函数内定义局部变量，作用范围仅在当前函数内。</p><p>可以在递归函数中定义局部变量。</p><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">local</span> 变量名<span class="token operator">=</span>变量值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>yxc    <span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span class="token punctuation">}</span>func<span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">yxc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一行为函数内的name变量，第二行为函数外调用name变量，会发现此时该变量不存在。</p><h2 id="exit命令"><a href="#exit命令" class="headerlink" title="exit命令"></a>exit命令</h2><ul><li><p>exit命令用来退出当前shell进程，并返回一个退出状态；使用$?可以接收这个退出状态。</p></li><li><p>exit命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是 0。</p></li><li><p>exit退出状态只能是一个介于 0~255 之间的整数，其中只有 0 表示成功，其它值都表示失败。</p></li></ul><p>示例：</p><p>创建脚本<strong>test.sh</strong>，内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -ne <span class="token number">1</span> <span class="token punctuation">]</span>  <span class="token comment"># 如果传入参数个数等于1，则正常退出；否则非正常退出。</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"arguments not valid"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"arguments valid"</span>    <span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行该脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">chmod</span> +x test.sh acs@9e0ebfcd82d7:~$ ./test.sh acwingarguments validacs@9e0ebfcd82d7:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 传入一个参数，则正常退出，exit code为0</span><span class="token number">0</span>acs@9e0ebfcd82d7:~$ ./test.sh arguments not validacs@9e0ebfcd82d7:~$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 传入参数个数不是1，则非正常退出，exit code为1</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h2><p>每个进程默认打开3个文件描述符：</p><ul><li>stdin标准输入，从命令行读取数据，文件描述符为0</li><li>stdout标准输出，向命令行输出数据，文件描述符为1</li><li>stderr标准错误输出，向命令行输出数据，文件描述符为2</li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中。</p><h4 id="重定向命令列表"><a href="#重定向命令列表" class="headerlink" title="重定向命令列表"></a>重定向命令列表</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command &gt; file</td><td>将stdout重定向到file中</td></tr><tr><td>command &lt; file</td><td>将stdin重定向到file中</td></tr><tr><td>command &gt;&gt; file</td><td>将stdout以追加方式重定向到file中</td></tr><tr><td>command n&gt; file</td><td>将文件描述符n重定向到file中</td></tr><tr><td>command n&gt;&gt; file</td><td>将文件描述符n以追加方式重定向到file中</td></tr></tbody></table><h4 id="输入和输出重定向"><a href="#输入和输出重定向" class="headerlink" title="输入和输出重定向"></a>输入和输出重定向</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -e <span class="token string">"Hello <span class="token entity" title="\c">\c</span>"</span> <span class="token operator">&gt;</span> output.txt  <span class="token comment"># 将stdout重定向到output.txt中</span><span class="token builtin class-name">echo</span> <span class="token string">"World"</span> <span class="token operator">&gt;&gt;</span> output.txt  <span class="token comment"># 将字符串追加到output.txt中</span><span class="token builtin class-name">read</span> str <span class="token operator">&lt;</span> output.txt  <span class="token comment"># 从output.txt中读取字符串</span><span class="token builtin class-name">echo</span> <span class="token variable">$str</span>  <span class="token comment"># 输出结果：Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="同时重定向stdin和stdout"><a href="#同时重定向stdin和stdout" class="headerlink" title="同时重定向stdin和stdout"></a>同时重定向stdin和stdout</h4><p>创建bash脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">read</span> a<span class="token builtin class-name">read</span> b<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> <span class="token string">"<span class="token variable">$a</span>"</span> + <span class="token string">"<span class="token variable">$b</span>"</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建input.txt，里面的内容为：</p><pre class="line-numbers language-none"><code class="language-none">34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">chmod</span> +x test.sh  <span class="token comment"># 添加可执行权限</span>acs@9e0ebfcd82d7:~$ ./test.sh <span class="token operator">&lt;</span> input.txt <span class="token operator">&gt;</span> output.txt  <span class="token comment"># 从input.txt中读取内容，将输出写入output.txt中</span>acs@9e0ebfcd82d7:~$ <span class="token function">cat</span> output.txt  <span class="token comment"># 查看output.txt中的内容</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引入外部脚本"><a href="#引入外部脚本" class="headerlink" title="引入外部脚本"></a>引入外部脚本</h2><p>类似于C/C++中的include操作，bash也可以引入其他文件中的代码。</p><p>语法格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span> filename  <span class="token comment"># 注意点和文件名之间有一个空格</span>或<span class="token builtin class-name">source</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>创建<strong>test1.sh</strong>，内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span>yxc  <span class="token comment"># 定义变量name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后创建<strong>test2.sh</strong>，内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token builtin class-name">source</span> test1.sh <span class="token comment"># 或 . test1.sh</span><span class="token builtin class-name">echo</span> My name is: <span class="token variable">$name</span>  <span class="token comment"># 可以使用test1.sh中的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acs@9e0ebfcd82d7:~$ <span class="token function">chmod</span> +x test2.sh acs@9e0ebfcd82d7:~$ ./test2.sh My name is: yxc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tmux和vim</title>
      <link href="/2022/07/04/tmux-he-vim/"/>
      <url>/2022/07/04/tmux-he-vim/</url>
      
        <content type="html"><![CDATA[<h2 id="一、tmux"><a href="#一、tmux" class="headerlink" title="一、tmux"></a>一、tmux</h2><h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><p>​    (1) 分屏。<br>​    (2) 允许断开Terminal连接后，继续运行进程。<br>结构：<br>​    一个tmux可以包含多个session，一个session可以包含多个window，一个window可以包含多个pane。</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><p>​        </p><pre class="line-numbers language-none"><code class="language-none">tmux:session 0:window 0:       pane 0            pane 1pane 2...        window 1        window 2        ...session 1session 2    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h4><p>​    (1) tmux：新建一个session，其中包含一个window，window中包含一个pane，pane里打开了一个shell对话框。<br>​    (2) 按下Ctrl + b后手指松开，然后按%：将当前pane左右平分成两个pane。<br>​    (3) 按下Ctrl + b后手指松开，然后按”（注意是双引号”）：将当前pane上下平分成两个pane。<br>​    (4) Ctrl + d：关闭当前pane；如果当前window的所有pane均已关闭，则自动关闭window；如果当前session的所有window均已关闭，则自动关闭session。<br>​    (5) 鼠标点击可以选pane。<br>​    (6) 按下ctrl + b后手指松开，然后按方向键：选择相邻的pane。<br>​    (7) 鼠标拖动pane之间的分割线，可以调整分割线的位置。<br>​    (8) 按住ctrl + b的同时按方向键，可以调整pane之间分割线的位置。<br>​    (9) 按下ctrl + b后手指松开，然后按z：将当前pane全屏/取消全屏。<br>​    (10) 按下ctrl + b后手指松开，然后按d：挂起当前session。<br>​    (11) tmux a：打开之前挂起的session。<br>​    (12) 按下ctrl + b后手指松开，然后按s：选择其它session。<br>​        方向键 —— 上：选择上一项 session/window/pane<br>​        方向键 —— 下：选择下一项 session/window/pane<br>​        方向键 —— 右：展开当前项 session/window<br>​        方向键 —— 左：闭合当前项 session/window<br>​    (13) 按下Ctrl + b后手指松开，然后按c：在当前session中创建一个新的window。<br>​    (14) 按下Ctrl + b后手指松开，然后按w：选择其他window，操作方法与(12)完全相同。<br>​    (15) 按下Ctrl + b后手指松开，然后按PageUp：翻阅当前pane内的内容。<br>​    (16) 鼠标滚轮：翻阅当前pane内的内容。<br>​    (17) 在tmux中选中文本时，需要按住shift键。（仅支持Windows和Linux，不支持Mac，不过该操作并不是必须的，因此影响不大）<br>​    (18) tmux中复制/粘贴文本的通用方式：<br>​        (1) 按下Ctrl + b后松开手指，然后按[<br>​        (2) 用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板<br>​        (3) 按下Ctrl + a后松开手指，然后按]，会将剪贴板中的内容粘贴到光标处</p><h2 id="二、vim"><a href="#二、vim" class="headerlink" title="二、vim"></a>二、vim</h2><h4 id="功能：-1"><a href="#功能：-1" class="headerlink" title="功能："></a>功能：</h4><p>​    (1) 命令行模式下的文本编辑器。<br>​    (2) 根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。<br>​    (3) 使用方式：vim filename<br>​        如果已有该文件，则打开它。<br>​        如果没有该文件，则打开个一个新的文件，并命名为filename</p><h4 id="模式："><a href="#模式：" class="headerlink" title="模式："></a>模式：</h4><p>​    (1) 一般命令模式<br>​        默认模式。命令输入方式：类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。<br>​    (2) 编辑模式<br>​        在一般命令模式里按下i，会进入编辑模式。<br>​        按下ESC会退出编辑模式，返回到一般命令模式。<br>​    (3) 命令行模式<br>​        在一般命令模式里按下:/?三个字母中的任意一个，会进入命令行模式。命令行在最下面。<br>​        可以查找、替换、保存、退出、配置编辑器等。</p><h4 id="操作：-1"><a href="#操作：-1" class="headerlink" title="操作："></a>操作：</h4><p>​    (1) i：进入编辑模式<br>​    (2) ESC：进入一般命令模式<br>​    (3) h 或 左箭头键：光标向左移动一个字符<br>​    (4) j 或 向下箭头：光标向下移动一个字符<br>​    (5) k 或 向上箭头：光标向上移动一个字符<br>​    (6) l 或 向右箭头：光标向右移动一个字符<br>​    (7) n<space>：n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符<br>​    (8) 0 或 功能键[Home]：光标移动到本行开头<br>​    (9) $ 或 功能键[End]：光标移动到本行末尾<br>​    (10) G：光标移动到最后一行<br>​    (11) :n 或 nG：n为数字，光标移动到第n行<br>​    (12) gg：光标移动到第一行，相当于1G<br>​    (13) n<enter>：n为数字，光标向下移动n行<br>​    (14) /word：向光标之下寻找第一个值为word的字符串。<br>​    (15) ?word：向光标之上寻找第一个值为word的字符串。<br>​    (16) n：重复前一个查找操作<br>​    (17) N：反向重复前一个查找操作<br>​    (18) :n1,n2s/word1/word2/g：n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2<br>​    (19) :1,$s/word1/word2/g：将全文的word1替换为word2<br>​    (20) :1,$s/word1/word2/gc：将全文的word1替换为word2，且在替换前要求用户确认。<br>​    (21) v：选中文本<br>​    (22) d：删除选中的文本<br>​    (23) dd: 删除当前行<br>​    (24) y：复制选中的文本<br>​    (25) yy: 复制当前行<br>​    (26) p: 将复制的数据在光标的下一行/下一个位置粘贴<br>​    (27) u：撤销<br>​    (28) Ctrl + r：取消撤销<br>​    (29) 大于号 &gt;：将选中的文本整体向右缩进一次<br>​    (30) 小于号 &lt;：将选中的文本整体向左缩进一次<br>​    (31) :w 保存<br>​    (32) :w! 强制保存<br>​    (33) :q 退出<br>​    (34) :q! 强制退出<br>​    (35) :wq 保存并退出<br>​    (36) :set paste 设置成粘贴模式，取消代码自动缩进<br>​    (37) :set nopaste 取消粘贴模式，开启代码自动缩进<br>​    (38) :set nu 显示行号<br>​    (39) :set nonu 隐藏行号<br>​    (40) gg=G：将全文代码格式化<br>​    (41) :noh 关闭查找关键词高亮<br>​    (42) Ctrl + q：当vim卡死时，可以取消当前正在执行的命令</enter></space></p><h4 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h4><p>​    每次用vim编辑文件时，会自动创建一个.filename.swp的临时文件。<br>​    如果打开某个文件时，该文件的swp文件已存在，则会报错。此时解决办法有两种：<br>​        (1) 找到正在打开该文件的程序，并退出<br>​        (2) 直接删掉该swp文件即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用文件管理指令</title>
      <link href="/2022/06/28/linux-chang-yong-wen-jian-guan-li-zhi-ling/"/>
      <url>/2022/06/28/linux-chang-yong-wen-jian-guan-li-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="ctrl-c"><a href="#ctrl-c" class="headerlink" title="ctrl c:"></a>ctrl c:</h2><p><strong>取消命令，并且换行</strong></p><h2 id="ctrl-u"><a href="#ctrl-u" class="headerlink" title="ctrl u:"></a>ctrl u:</h2><p><strong>清空本行命令</strong></p><h2 id="tab键："><a href="#tab键：" class="headerlink" title="tab键："></a>tab键：</h2><p><strong>可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项</strong></p><h2 id="ls"><a href="#ls" class="headerlink" title="ls:"></a><strong>ls:</strong></h2><p><strong>列出当前目录下所有文件</strong></p><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd:"></a>pwd:</h2><p><strong>显示当前路径</strong></p><h2 id="cd-XXX"><a href="#cd-XXX" class="headerlink" title="cd XXX:"></a>cd XXX:</h2><p><strong>进入XXX目录下, cd .. 返回上层目录</strong></p><h2 id="cp-XXX-YYY"><a href="#cp-XXX-YYY" class="headerlink" title="cp XXX YYY:"></a>cp XXX YYY:</h2><p><strong>将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如../dir_c/a.txt，表示上层目录下的dir_c文件夹下的文件a.txt</strong></p><h2 id="mkdir-XXX"><a href="#mkdir-XXX" class="headerlink" title="mkdir XXX:"></a>mkdir XXX:</h2><p><strong>创建目录XXX</strong></p><h2 id="rm-XXX"><a href="#rm-XXX" class="headerlink" title="rm XXX:"></a>rm XXX:</h2><p><strong>删除普通文件;  rm XXX -r: 删除文件夹</strong></p><h2 id="mv-XXX-YYY"><a href="#mv-XXX-YYY" class="headerlink" title="mv XXX YYY:"></a>mv XXX YYY:</h2><p><strong>将XXX文件移动到YYY，和cp命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令</strong></p><h2 id="touch-XXX"><a href="#touch-XXX" class="headerlink" title="touch XXX:"></a>touch XXX:</h2><p><strong>创建一个文件</strong></p><h2 id="cat-XXX"><a href="#cat-XXX" class="headerlink" title="cat XXX:"></a>cat XXX:</h2><p><strong>展示文件XXX中的内容</strong></p><h2 id="复制文本"><a href="#复制文本" class="headerlink" title="复制文本"></a>复制文本</h2><p>​    <strong>windows/Linux下：Ctrl + insert，Mac下：command + c</strong></p><h2 id="粘贴文本"><a href="#粘贴文本" class="headerlink" title="粘贴文本"></a>粘贴文本</h2><p>​    <strong>windows/Linux下：Shift + insert，Mac下：command + v</strong></p><h2 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h2><p><strong>(0) 进入homework_0文件夹，分别创建文件夹dir_a, dir_b, dir_c</strong></p><pre class="line-numbers language-none"><code class="language-none">cd homework/lesson_1/homework_0mkdir dir_a dir_b dir_ccd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>(1) 进入homework_1文件夹，将a.txt, b.txt, c.txt 分别复制成: a.txt.bak, b.txt.bak, c.txt.bak</strong></p><pre class="line-numbers language-none"><code class="language-none">cd homework_1cp a.txt a.txt.bakcp b.txt b.txt.bakcp c.txt c.txt.bakcd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(2) 进入homework_2文件夹，将a.txt, b.txt, c.txt 分别重命名为: a_new.txt, b_new.txt, c_new.txt</strong></p><pre class="line-numbers language-none"><code class="language-none">cd homework_2mv a.txt a_new.txtmv b.txt b_new.txtmv c.txt c_new.txtcd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(3) 进入homework_3文件夹，将dir_a文件夹下的a.txt, b.txt, c.txt分别移动到文件夹dir_b下</strong></p><pre class="line-numbers language-none"><code class="language-none">cd homework_3mv dir_a/*txt dir_bcd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>(4) 进入homework_4文件夹，将普通文件a.txt, b.txt, c.txt删除</strong></p><pre class="line-numbers language-none"><code class="language-none">cd homework_4rm *cd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>(5) 进入homework_5文件夹，将文件夹dir_a, dir_b, dir_c删除</strong></p><pre class="line-numbers language-none"><code class="language-none">cd homework_5rm * -rcd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>(6) 进入homework_6文件夹，查看task.txt的内容，并按其指示进行操作</strong></p><pre class="line-numbers language-none"><code class="language-none">cd homework_6    // 进入homework_6文件cat task.txt    // 查看内容mkdir dir_a     // 创建目录 dir_amv task.txt dir_a/done.txt    // 移动到a目录xia重命名为 done.txtcd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(7) 进入homework_7文件夹，创建文件夹dir_0, dir_1, dir_2，</strong></p><p>​    <strong>将a.txt, b.txt, c.txt复制到dir_0下，重命名为a0.txt, b0.txt, c0.txt;</strong><br>​    <strong>将a.txt, b.txt, c.txt复制到dir_1下，重命名为a1.txt, b1.txt, c1.txt;</strong><br>​    <strong>将a.txt, b.txt, c.txt复制到dir_2下，重命名为a2.txt, b2.txt, c2.txt;</strong></p><pre class="line-numbers language-none"><code class="language-none">cd homework_7mkdir dir_0 dir_1 dir_2cp a.txt dir_0/a0.txtcp a.txt dir_1/a1.txtcp a.txt dir_2/a2.txtcp b.txt dir_0/b0.txtcp b.txt dir_1/b1.txtcp b.txt dir_2/b2.txtcp c.txt dir_0/c0.txtcp c.txt dir_1/c1.txtcp c.txt dir_2/c2.txtcd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(8) 进入homework_8文件夹，分别在dir_a, dir_b, dir_c文件夹下查看task.txt的内容，并分别按照指示进行操作</strong></p><pre class="line-numbers language-none"><code class="language-none">cd homework_8   //进入homework_8文件夹cd dir_a    //进入dir_a文件夹cat task.txt    //查看task.txtrm a.txt    //删除a.txtcd ../dir_b/    //进入dir_b文件夹cat task.txt    //查看task.txtmv b.txt b_new.txt  //将b.txt重命名为b_new.txtcd ../dir_c/    //进入dir_c文件夹cat task.txt    //查看task.txtcp c.txt c.txt.bak  //将c.txt复制成c.txt.bakcd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(9) 进入homework_9文件夹，将其中所有txt类型的文件删除</strong></p><pre class="line-numbers language-none"><code class="language-none">cd homework_9rm *.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><strong>路径:</strong><br>绝对路径: 从根目录开始描述;<br>相对路径: 从当前位置开始描述的路径;<br>. 当前目录<br>.. 上级目录<br>~/ &lt;===&gt; /home/acs 家目录</p><p><strong>基本操作</strong><br>ctrl + C: 取消命令，并且换行;<br>ctrl + U: 清空本行命令;<br>tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项;<br>方向键：可以回到上一个命令；</p><p><strong>基本命令</strong><br>ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件</p><p><strong>参数：</strong><br>-l : 展示详细信息;<br>-h : 人性化的显示详细信息;<br>-a : 显示所有的文件(包括被隐藏的文件, 所有被隐藏的文件都是以.开头的);<br>ll 等价于ls -la</p><p>pwd: 显示当前位置;</p><p>cd: cd + 路径;</p><p>cd 默认返回家目录, cd .. 返回上一层目录, cd - 返回上一个待过的目录;</p><p>cp: cp 路径1 路径2——(将路径1内容复制一份放路径2里面, 复制 + 粘贴 + 重命名);<br>eg:<br>cp a/tmp.txt b (复制一份到粘贴到b里面)；<br>cp a/tmp.txt b/tmp2.txt; (复制一份到粘贴到b里面,并重命名)<br>如果复制文件夹后面加-r<br>eg: cp a b -r; (将a复制一份粘贴到b里面)</p><ul><li>表示本文件夹里所有文件</li></ul><p>mkdir a :创建文件夹a<br>mkdir: 创建文件夹;(可以加-p创建一系列的文件夹)</p><p>eg:<br>mkdir /home/acs/a/b (在根目录下创建文件)<br>mkdir a/b/c -p (在该文件夹下创建a/b/c复合文件)</p><p>history: 显示历史用过的指令;</p><p>rm: 删除,<br>rm xxx: 删除某一文件;<br>rm xxx -r: 删除某文件夹;(支持正则表达式);</p><p>eg:<br>rm tmp.txt tmp2.txt (删除tmp.txt和tmp2.txt)<br>rm .txt (删除所有txt文件)<br>rm a/ (删除a里面所有东西)</p><p>windows彻底删除文件:Shift + Delete;</p><p>mv: mv xxx yyy (剪切+ 粘贴)</p><p>eg:<br>mv a/tmp.txt b/ (将a中tmp.txt文件挪到b文件夹里面)<br>mv b/tmp.txt a/tmp2.txt (将b中tmp.txt文件挪到a文件夹里面并重命名为tmp2.txt)<br>mv tmp2.txt tmp.txt (将tmp2.txt重命名为tmp.txt)</p><p>cp与mv区别:cp(复制+粘贴), mv(剪切+粘贴)<br>mkdir与touch区别:mkdir(创建文件夹), touch(创建文件)</p><p>cat: cat xxx(查看xxx文件);</p><p>eg:<br>cat a/tmp.cpp(查看tmp.cpp文件)</p><p>rm /* -rf (删除所有文件)</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog</title>
      <link href="/2022/06/26/blog/"/>
      <url>/2022/06/26/blog/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a><strong>hexo s</strong></h2><pre class="line-numbers language-none"><code class="language-none">hexo s1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/">http://localhost:4000/</a></p><ul><li>hexo s 是 hexo server 的缩写，命令效果一致；</li><li>预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；</li><li>对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。</li></ul><h2 id="git-config-–global-–unset-http-proxy"><a href="#git-config-–global-–unset-http-proxy" class="headerlink" title="git config –global –unset http.proxy"></a><strong>git config –global –unset http.proxy</strong></h2><pre class="line-numbers language-none"><code class="language-none">git config --global --unset http.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>取消代理权限，搭梯子后若不取消代理权限，容易出问题</p><h2 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h2><pre class="line-numbers language-none"><code class="language-none">hexo new "学习笔记  六"1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。</p><ul><li>文章标题可以在对应 md 文件里改，新建时标题可以写的简单些。</li></ul><h2 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a><strong>hexo d</strong></h2><pre class="line-numbers language-none"><code class="language-none">hexo d1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自动生成网站静态文件，并部署到设定的仓库。</p><ul><li>hexo d 是 hexo deploy 的缩写，命令效果一致。</li></ul><h2 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a><strong>hexo clean</strong></h2><pre class="line-numbers language-none"><code class="language-none">hexo clean1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>清除缓存文件 db.json 和已生成的静态文件 public 。</p><ul><li>网站显示异常时可以执行这条命令试试。</li></ul><h2 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a><strong>hexo g</strong></h2><pre class="line-numbers language-none"><code class="language-none">hexo g1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成网站静态文件到默认设置的 public 文件夹。</p><ul><li>便于查看网站生成的静态文件或者手动部署网站；</li><li>如果使用自动部署，不需要先执行该命令；</li><li>hexo g 是 hexo generate 的缩写，命令效果一致。</li></ul><h2 id="hexo-new-page"><a href="#hexo-new-page" class="headerlink" title="hexo new page"></a><strong>hexo new page</strong></h2><pre class="line-numbers language-none"><code class="language-none">hexo new page aboutme1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/</p><ul><li>标题可以为中文，但一般习惯用英文；</li><li>页面标题和文章一样可以随意修改；</li><li>页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</li></ul><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><ul><li><p>git init 初始化一个仓库 ，会将该目录下所有文件交给git管理</p></li><li><p>git status 查看当前版本管理状态</p></li><li><p>git add 文件1 文件2… 把有变化的文件(新增的、修改的、删除的) 添加到git暂存区里</p><blockquote><p>git add . 将所有改变的文件统一 加入到暂存区里</p></blockquote></li><li><p>git rm –cached 文件1 文件2 把暂存区中的文件从暂存区移除</p></li><li><p>git commit -m ‘提交描述’</p></li><li><p>git restore 文件1 文件 2 … 放弃文件的改变</p></li><li><p>git log 查看提交历史</p></li><li><p>git reflog 查看命令历史</p></li><li><p>git reset –hard commitid 恢复到指定版本</p></li><li><p>```csharp<br>git remote add origin <a href="https://gitee.com/nieps/javademo.git">https://gitee.com/nieps/javademo.git</a>   将本地仓库与远程仓库建立联系</p><pre class="line-numbers language-none"><code class="language-none">- git push -u origin master 将本地代码推送到远程 首次推送- git push -f origin master 强制推送本地代码到远程- git remote 查看远程分支的名称- git remote -v 查看远程分支的名称及远程仓库的地址- git remote rm 远程分支名称 删除要本地仓库与远程仓库的关联关系- git pull niu master 拉取远程服务器代码- git clone 远程分支地址 将远程代码克隆到本地- git 命令 --help 查看命令帮助- git branch 查看当前的分支- git checkout -b 分支的名称 创建并切换到分支上- git switch -c 分支名称 创建并切换到分支上- git branch -d 分支名称 删除分支  &gt; git branch 分支的名称 创建分支  &gt;  &gt; git checkout 分支的名称 切换分支  - git merge 分支名称 将分支中的内容合并到当前分支  - git switch 分支名称 切换到分支上  - git tag 标签名 创建一个标签 默认该标签指向最新的commitid  - git tag 查看所有标签  - git tag 标签名 commitid 给指定的commit打标签  - git tag -d 标签名 删除标签  - git push 远程分支名称 标签名 将指定标签推送到远程  - git push 远程分支名称 --tags 将所有标签推送到远程    &gt; 删除远程标签：    &gt;    &gt; 1. 先删除本地 git tag -d 标签名    &gt; 2. 删除远程 git push 远程分支名称 :/refs/tags/标签名  - git push origin(远程分支名称) 本地分支：远程分支 将本地的分支推送到远程分支    &gt; git branch -d 删除本地分支    &gt;    &gt; git push origin(远程分支名称) --delete 远程仓库分支名称```bashgit initgit add .git commit -m "****" git remote add origin ***git push -u origin mastergit pull --rebase origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度问题</title>
      <link href="/2022/06/24/gao-jing-du-wen-ti/"/>
      <url>/2022/06/24/gao-jing-du-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1，高精度加法"><a href="#1，高精度加法" class="headerlink" title="1，高精度加法"></a>1，高精度加法</h2><p>模板：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; add(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B) {vector&lt;int&gt; C;int t = 0;for (int i = 0; i &lt; A.size() || i &lt; B.size(); i ++) {if (i &lt; A.size()) t += A[i];if (i &lt; B.size()) t += B[i];C.push_back(t % 10);t /= 10;}if (t != 0) C.push_back(1);return C;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;const int N = 1e6 + 10;vector&lt;int&gt; add(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B) {vector&lt;int&gt; C;int t = 0;for (int i = 0; i &lt; A.size() || i &lt; B.size(); i ++) {if (i &lt; A.size()) t += A[i];if (i &lt; B.size()) t += B[i];C.push_back(t % 10);t /= 10;}if (t != 0) C.push_back(1);return C;}int main() {string a, b;vector&lt;int&gt; A, B;cin &gt;&gt; a &gt;&gt; b; //a = 123456for (int i = a.size() - 1; i &gt;= 0; i --) A.push_back(a[i] - '0'); //6 5 4 3 2 1 for (int i = b.size() - 1; i &gt;= 0; i --) B.push_back(b[i] - '0');vector&lt;int&gt; C = add(A, B);for (int i = C.size() - 1; i &gt;= 0; i--) printf("%d", C[i]);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现2：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;string&gt;#include &lt;cmath&gt;using namespace std;string s1, s2;int sum[10010], a[10010], b[10010];int maxlen;void high_add();int main() {cin &gt;&gt; s1 &gt;&gt; s2;high_add();for (int i = maxlen - 1; i &gt;= 0; i--) {cout &lt;&lt; sum[i];}return 0;}void high_add() {int len1 = s1.size();int len2 = s2.size();//讲每一位字符转化数字并进行反转for (int i = 0; i &lt; len1; i++) {a[len1 - i - 1] = s1[i] - '0';}for (int i = 0; i &lt; len2; i++) {b[len2 - i - 1] = s2[i] - '0';}//选出最大的进制位maxlen = max(len1, len2);//开始进行模拟加法运算；for (int i = 0; i &lt; maxlen; i++) {sum[i] += a[i] + b[i];sum[i + 1] += sum[i] / 10;sum[i] %= 10;}//判断进位处理；if (sum[maxlen] != 0) {maxlen++;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-高精度减法"><a href="#2-高精度减法" class="headerlink" title="2.高精度减法"></a>2.高精度减法</h2><p>模板</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//C = A - Bvector&lt;int&gt; sub(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) {vector&lt;int&gt; C;for (int i = 0, t = 0; i &lt; A.size(); i ++) {    t = A[i] - t;    if(i &lt; B.size()) t -= B[i];    C.push_back((t + 10) % 10);     if(t &lt; 0) t =1;    else t = 0;}while(C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back(); //去掉前导0return C;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现1：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;//判断A &gt;= Bbool cmp(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) {    if(A.size() != B.size()) return A.size() &gt;= B.size();    for (int i = A.size() - 1;  i &gt;= 0; i --) {        if(A[i] != B[i])        return A[i] &gt; B[i];    }    return true;}//C = A - Bvector&lt;int&gt; sub(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) {vector&lt;int&gt; C;for (int i = 0, t = 0; i &lt; A.size(); i ++) {    t = A[i] - t;    if(i &lt; B.size()) t -= B[i];    C.push_back((t + 10) % 10);     if(t &lt; 0) t =1;    else t = 0;}while(C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();return C;}int main() {string a, b;vector&lt;int&gt; A, B;cin &gt;&gt; a &gt;&gt; b; //a = 123456for (int i = a.size() - 1; i &gt;= 0; i--) A.push_back(a[i] - '0'); //6 5 4 3 2 1 for (int i = b.size() - 1; i &gt;= 0; i--) B.push_back(b[i] - '0');    if(cmp(A, B)) {        auto C = sub(A, B);        for (int i = C.size() - 1; i &gt;= 0; i--) printf("%d", C[i]);            } else {        auto C = sub(B , A);                printf("-");                for (int i = C.size() - 1; i &gt;= 0; i--) printf("%d", C[i]);    }return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现2：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int len1, len2;int maxlen;string s1, s2;int a[10010], b[10010], sub[10010];bool flag, zero_f;void high_sub();int main() {cin &gt;&gt; s1 &gt;&gt; s2;high_sub();if (flag) cout &lt;&lt; "-";for (int i = maxlen - 1; i &gt;= 1; i--) {//处里0；if (!zero_f &amp;&amp; sub[i]==0) continue;zero_f = true;cout &lt;&lt; sub[i];}//特殊处理最后一位;cout &lt;&lt; sub[0];return 0;}void high_sub() {len1 = s1.size();len2 = s2.size();for (int i = 0; i &lt; len1; i++) {a[len1 - i - 1] = s1[i] - '0';}for (int i = 0; i &lt; len2; i++) {b[len2 - i - 1] = s2[i] - '0';}//判断大小并交换；if (len1 &lt; len2) flag = true, swap(a, b), swap(len1, len2);else if (len1 == len2) {for (int i = len1 - 1; i &gt;= 0; i--) {if (a[i] == b[i]) continue;else if (a[i] &gt; b[i]) break;else { flag = true, swap(a, b), swap(len1, len2); break; }//从后往前检查b[i]&gt;a[i]如果大于a[i]进行交换跳出循环;//同时这也说明这一定是一个负数，并}}//控制进位;int low = 0;maxlen = max(len1, len2);//模拟减法;for (int i = 0; i &lt; maxlen; i++) {sub[i] += a[i] - b[i] - low;low = 0;//当sub[i]小于0时sub[i+1]借过来一个1也就是减1        //并在当前sub[i]中加10；if (sub[i] &lt; 0) {low = 1;sub[i] += 10;}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-高精度乘法"><a href="#3-高精度乘法" class="headerlink" title="3.高精度乘法"></a>3.高精度乘法</h2><p>模板：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b) {    vector&lt;int&gt; C;        int t = 0;    for(int i = 0; i &lt; A.size() || t; i ++) {        if(i &lt; A.size()) t += A[i] * b;        C.push_back(t % 10);        t /= 10;    }    while(C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back(); //去掉前导0    return C;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现1：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b) {    vector&lt;int&gt; C;        int t = 0;    for(int i = 0; i &lt; A.size() || t; i ++) {        if(i &lt; A.size()) t += A[i] * b;        C.push_back(t % 10);        t /= 10;    }    while(C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back(); //去掉前导0    return C;}int main() {string a;int b;cin &gt;&gt; a &gt;&gt; b;vector&lt;int&gt; A;for(int i = a.size() - 1; i &gt;= 0; i --) A.push_back(a[i] - '0');vector&lt;int&gt; C = mul(A, b);for(int i = C.size() - 1; i &gt;= 0; i --) printf("%d", C[i]);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现2：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;string s1, s2;int multip[10010], a[10010], b[10010];int maxlen;bool flag;void high_multip();int main() {cin &gt;&gt; s1 &gt;&gt; s2;high_multip();for (int i = maxlen ; i &gt;= 1; i--) {//处理0;if (!flag &amp;&amp; multip[i] == 0) continue;flag = true;cout &lt;&lt; multip[i];}//特殊处理最后一位;cout &lt;&lt; multip[0];return 0;}void high_multip() {int len1 = s1.size();int len2 = s2.size();for (int i = 0; i &lt; len1; i++) {a[len1 - i - 1] = s1[i] - '0';}for (int i = 0; i &lt; len2; i++) {b[len2 - i - 1] = s2[i] - '0';}maxlen = len1 + len2;//让b[i]每以位都相乘与a[i]的每一位;for (int i = 0; i &lt; len1; i++) {for (int j = 0; j &lt; len2; j++) {//每位相乘multip[i + j] += a[i] * b[j];//进位处理multip[i + j + 1] += multip[i + j] / 10;multip[i + j] %= 10;}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-高精度除法"><a href="#4-高精度除法" class="headerlink" title="4.高精度除法"></a>4.高精度除法</h2><p>模板：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r) {    vector&lt;int&gt; C;    r = 0;    for(int i = A.size() - 1; i &gt;= 0; i --) {        r = r * 10 + A[i];        C.push_back(r / b);        r %= b;    }        reverse(C.begin(), C.end()); //反转数组    while(C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back(); //去掉前导0    return C;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现1：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;using namespace std;// A/b 余数rvector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r) { //r是余数    vector&lt;int&gt; C;    r = 0;    for(int i = A.size() - 1; i &gt;= 0; i --) {        r = r * 10 + A[i];        C.push_back(r / b);        r %= b;    }        reverse(C.begin(), C.end()); //反转数组    while(C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back(); //去掉前导0    return C;}int main() {string a;int b;cin &gt;&gt; a &gt;&gt; b;vector&lt;int&gt; A;for(int i = a.size() - 1; i &gt;= 0; i --) A.push_back(a[i] - '0');int r;vector&lt;int&gt; C = div(A, b, r);for(int i = C.size() - 1; i &gt;= 0; i --) printf("%d", C[i]);cout &lt;&lt; endl;cout &lt;&lt; r &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现2：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;cmath&gt;using namespace std;bool str_Judge_size(string s1, string s2)//判断s1和s2的大小 {if (s1.size() &gt; s2.size() || (s1.size() == s2.size() &amp;&amp; s1 &gt;= s2))  return true;//如果s1位数大 return false;//或两数位数相同且s1大返回正，否则返回负 }string sub(string s1, string s2)//高精度减法{int i, a[10005] = { 0 }, b[10005] = { 0 }, s[10005] = { 0 }, l1 = s1.size(), l2 = s2.size(), l = max(l1, l2), w = 0;string ans;for (i = 0; i &lt; l1; i++)  a[l1 - i - 1] = int(s1[i] - '0');for (i = 0; i &lt; l2; i++)  b[l2 - i - 1] = int(s2[i] - '0');for (i = 0; i &lt; l; i++)  s[i] = a[i] - b[i];for (i = 0; i &lt;= l; i++){if (s[i] &lt; 0){s[i + 1]--;s[i] += 10;}if (s[i] != 0)  w = i;}for (i = 0; i &lt;= w; i++)  ans = char(s[i] + '0') + ans;return ans;}string div(string s1, string s2)//做除法的两个高精度数 {int s[10005] = { 0 }; //s是最终的商，每一个s表示一位数 int l1 = s1.size(), l2 = s2.size(); //两个字符串的长度 int w = 0;                      //表示商的最高位 string ans = "", v1 = s1, v2;  //v1和v2做差 while (str_Judge_size(v1, s2))//当商s2比v1大时，即还能减 {int x = 0;//减数扩的倍数 v2 = s2;while (str_Judge_size(v1, v2 + "0"))//还可以扩倍 {v2 += '0';//相减的数如果能再大一位，就*10，即在字符串末尾添加‘0 ’ x++;//位数++ }v1 = sub(v1, v2);//二数相减 s[x]++;  //s位++ if (x &gt; w)  w = x;           //如果位数大于x，x替换成w }for (int i = 0; i &lt;= w; i++)  ans = char(s[i] + '0') + ans;    //把结果转换回string返回 return ans;}int main(){string v1, v2;//高精度两数 cin &gt;&gt; v2 &gt;&gt; v1;//输入 cout &lt;&lt; div(v1, v2) &lt;&lt; endl;//输出 return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-其他高精度问题"><a href="#5-其他高精度问题" class="headerlink" title="5.其他高精度问题"></a>5.其他高精度问题</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//累加求和高精度#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;string&gt;#include &lt;cmath&gt;using namespace std;int a[10010], b[10010];int maxlen = 1;void high_add();int main() {int n;cin &gt;&gt; n;a[0] = 0;b[0] = 0;for (int i = 1; i &lt;= n; i++) {b[0] = i;high_add();}for (int i = maxlen - 1; i &gt;= 0; i--) {cout &lt;&lt; a[i];}return 0;}void high_add() {//开始进行模拟加法运算；for (int i = 0; i &lt; maxlen; i++) {a[i] += b[i];a[i + 1] += a[i] / 10;a[i] %= 10;}//判断进位处理；if (a[maxlen] != 0) {maxlen++;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//斐波那契高精度#include &lt;iostream&gt;using namespace std;int f[5010][5010];int n;int flag = false;int main() {f[0][1] = 0;f[1][1] = 1;f[2][1] = 2;cin &gt;&gt; n;for (int i = 3; i &lt;= n; i++) {for (int j = 1; j &lt;= 5000; j++) {            //前两项相加;f[i][j] = f[i - 1][j] + f[i - 2][j];}        //采取进位;for (int j = 1; j &lt;= 5000; j++) {            //当发f[i][j]大于采取进位;if (f[i][j] &gt;= 10) {f[i][j + 1] += f[i][j] / 10;f[i][j] %= 10;}}}    for (int i = 5000; i &gt; 1; i--) {        //删除前导零；if (!flag &amp;&amp; f[n][i] == 0) continue;flag = true;cout &lt;&lt; f[n][i];}    //特殊处理个位cout &lt;&lt; f[n][1];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 高精度问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组去重</title>
      <link href="/2022/06/23/shu-zu-qu-chong/"/>
      <url>/2022/06/23/shu-zu-qu-chong/</url>
      
        <content type="html"><![CDATA[<p>数组去重</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cstring&gt;#include &lt;deque&gt;#include &lt;stack&gt;#include &lt;set&gt;using namespace std;int main() {    //set去重方法, 原数组可以无序    int nums1[] = {1, 3, 1, 2, 2, 3, 4, 5, 5, 6};    int len = sizeof(nums1) / sizeof(int); //计算出元素个数    vector&lt;int&gt; vec(nums1, nums1 + len); //将数组转换成vector数组    set&lt;int&gt; s(vec.begin(), vec.end());    vec.assign(s.begin(), s.end()); //将s中的数据复制到vec    for(int x : vec) {        cout &lt;&lt; x &lt;&lt; " ";    }    cout &lt;&lt; endl;    //unique的vector去重方法， 原数组必须有序，若无序则需要排序    vector&lt;int&gt; nums2 = {10, 10, 11, 11, 12, 13, 14, 14, 15, 16};    sort(nums2.begin(), nums2.end());    //vector&lt;int&gt;::iterator n = unique(nums2.begin(), nums2.end());    //nums2.erase(n, nums2.end());    nums2.erase(unique(nums2.begin(), nums2.end()), nums2.end()); //等同于上面两行    for(int y : nums2) {        cout &lt;&lt; y &lt;&lt; " ";    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C++语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串匹配</title>
      <link href="/2022/05/05/zi-fu-chuan-pi-pei/"/>
      <url>/2022/05/05/zi-fu-chuan-pi-pei/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h2><p>字符串又称模式匹配（pattern matching）。该问题可以概括为：给定字符串<code>S</code>和<code>T</code>，在母串<code>S</code>中寻找子串<code>T</code>。子串<code>T</code>称为模式串 (pattern)。</p><h3 id="一、暴力匹配"><a href="#一、暴力匹配" class="headerlink" title="一、暴力匹配"></a>一、暴力匹配</h3><p>暴力算法（Brute Force Algorithm）又叫朴素字符串匹配算法（Naive String Matching Algorithm）。<br>该算法的基本思路就是将字符一个一个地进行比较：</p><p>​        如果S和T两个字符串的第一个字符相同就比较第二个字符,如果相同就一直继续；<br>​        如果其中有某一个字符不同，则将T字符串向后移一位，将S字符串的第二个字符与T的字符串的第一个字符重新开始比较。<br>​        循环往复，一直到结束。</p><p>1.<img src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050103.png" alt="img"></p><p>首先，字符串”BBC ABCDAB ABCDABCDABDE”的第一个字符与搜索词”ABCDABD”的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。</p><p>2.<img src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050104.png" alt="img"></p><p>因为B与A不匹配，搜索词再往后移。</p><p>3.<img src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050105.png" alt="img"></p><p>就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。</p><p>4.<img src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050106.png" alt="img"></p><p>接着比较字符串和搜索词的下一个字符，还是相同。</p><p>5.<img src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050107.png" alt="img"></p><p>直到字符串有一个字符，与搜索词对应的字符不相同为止。</p><p>6.<img src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050113.png" alt="img"></p><p>重复上述操作，直至匹配。</p><p><strong>代码演示01：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;string S, T;int main() {cin &gt;&gt; S &gt;&gt; T;int i = 0, j = 0;while(i &lt; S.size() &amp;&amp; j &lt; T.size()) {if(S[i] == T[j]) {i ++;j ++;} else {i = i - j + 1; //主串回溯到上次回溯位置的下一个位置j = 0; //模式串回溯到第一个位置}}if(j = T.size() - 1) cout &lt;&lt; "yes" &lt;&lt; endl; //模式串匹配到最后一个位置else cout &lt;&lt; "no" &lt;&lt; endl;} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码演示02：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/*************************************************************************      &gt; File Name: KMP01.cpp      &gt; Author: 小学生陈冲同学      &gt; Mail: 2092518741@qq.com      &gt; Created Time: Mon May  2 20:14:39 2022 ************************************************************************/#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;using namespace std;const int N = 1010;char text[N], pattern[N];int brute_force(char *s, char *t) {    int len1 = strlen(s);    int len2 = strlen(t);    for(int i = 0; i &lt; len1 - len2 + 1; i ++ ) {        int j = 0;        for(; t[j]; j ++ ) {            if(t[j] == s[i + j]) continue;            break;        }        if(!t[j]) return i;    }    return -1;}int main() {    scanf("%s%s", text, pattern);    cout &lt;&lt; "brute_force(" &lt;&lt; text &lt;&lt; ", " &lt;&lt; pattern &lt;&lt; ") = " &lt;&lt; brute_force(text, pattern) &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、KMP算法"><a href="#二、KMP算法" class="headerlink" title="二、KMP算法"></a>二、KMP算法</h3><p><strong>kmp算法简介</strong></p><p>Knuth-Morris-Pratt算法（简称KMP）是最常用的字符串匹配算法之一。它以三个发明者命名，起头的那个K就是著名科学家Donald Knuth。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/c5d0a57b50ba31c2.png"></p><p><strong>通过暴力匹配找出KMP算法规律</strong></p><p>首先，母串”aecaeaecaed”的第一个字符与模式串”aecaed”的第一个字符，进行比较。因为a与a匹配，所以母串指针与模式串指针同时后移</p><p>时间复杂度O（n）</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/4a726a79312d048e.png"></p><p>指针后移后重复操作。匹配到图中位置，发现并不匹配</p><img src="https://s3.bmp.ovh/imgs/2022/05/05/0db3b70f1556af7c.png"><p>模式串后移一位，母串指针回到“e”位置，模式串指针回到开头“a”的位置。（母串指针前移是造成暴力匹配效率低的重要因素之一）</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/2383f16506579461.png"></p><p>重复以上操作匹配成功</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/129314f07ccb1fbb.png"></p><p>![Image 345](E:\截图保存\Image 345.png)</p><p>接下来引入暴力优化为kmp算法</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/8637a036a6b3ca8b.png"></p><p>模式串前移</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/00bff45a55ebcc7c.png"></p><p>模式串自身之间的关系（前缀与后缀）</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/4f60bb5108ffcd70.png"></p><p>next数组</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/33d16e04b122be03.png"></p><p>课堂练习求next数组</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/03d00458d2aef83a.png"></p><p>答案</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/d9df00143871de77.png"></p><p>模拟KMP算法</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/36801230461c988c.png"></p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/cffc99f860d7d452.png"></p><p>kmp算法的关键就是母串指针从始至终并未前移</p><p><strong>代码实现：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/*************************************************************************      &gt; File Name: KMP01.cpp      &gt; Author: 小学生陈冲同学      &gt; Mail: 2092518741@qq.com      &gt; Created Time: Mon May  2 20:14:39 2022 ************************************************************************/#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;using namespace std;const int N = 1010;char text[N], pattern[N];int kmp(char *s, char *t) {    int len1 = strlen(s);    int len2 = strlen(t);    int *next =  (int *)malloc(sizeof(int) * len2);    next[0] = -1;    for(int i = 1, j = -1; i &lt; len2; i++) { //初始化next数组        while(j != -1 &amp;&amp; t[j + 1] != t[i]) j = next[j];        if(t[j + 1] == t[i]) j += 1;        next[i] = j;    }    for(int i = 0, j = -1; s[i]; i++) {        while(j != -1 &amp;&amp; t[j + 1] != s[i]) j = next[j];        if(t[j + 1] == s[i]) j += 1;        if(t[j + 1] == 0) return i - len2 + 1;    }    free(next);    return -1;}int main() {    scanf("%s%s", text, pattern);    cout &lt;&lt; "kmp(" &lt;&lt; text &lt;&lt; ", " &lt;&lt; pattern &lt;&lt; ") = " &lt;&lt; kmp(text, pattern) &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Sunday算法"><a href="#三、Sunday算法" class="headerlink" title="三、Sunday算法"></a>三、Sunday算法</h3><p><strong>sunday算法简介</strong></p><p>​    Sunday算法由Daniel M.Sunday在1990年提出，它的思想跟BM算法很相似：只不过Sunday算法是从前往后匹配，在匹配失败时关注的是主串中参加匹配的最末位字符的下一位字符。</p><p>​    如果该字符没有在模式串中出现则直接跳过，即移动位数 = 模式串长度 + 1；<br>​    否则，其移动位数 = 模式串长度 - 该字符最右出现的位置(以0开始，即最后出现的位置) = 模式串中该字符最右出现的位置到尾部的距离 + 1。<br>下面举个例子说明下Sunday算法。假定现在要在主串”substring searching”中查找模式串”search”。</p><p>时间复杂度最好为O（m / n）,适合查找模式串是否在母串出现过</p><p>第一次出现不匹配</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/91eee5220f62505a.png"></p><p>匹配失败，关注主串中参加匹配的最末位字符的下一位字符</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/d5e5c2d1c1f78333.png"></p><p>在模式串查找是否有这个字符</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/0be84cc61a856484.png"></p><p>若模式串中出现此字符，模式串右移，从字符串首位重新开始匹配</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/7fab9834f622f81a.png"></p><p>如果仍有匹配失败的情况，循环上述过程，直至匹配成功或模式串无法再右移</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/05/a4ed804d584bded6.png"></p><p><strong>代码实现</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/*************************************************************************      &gt; File Name: KMP01.cpp      &gt; Author: 小学生陈冲同学      &gt; Mail: 2092518741@qq.com      &gt; Created Time: Mon May  2 20:14:39 2022 ************************************************************************/#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cstring&gt;#include &lt;deque&gt;#include &lt;stack&gt;using namespace std;const int N = 1010;char text[N], pattern[N];int sunday(char *s, char *t) {    //初始化ind数组，ind数组存储的是字符存储在模式串的倒数第几位    int ind[128] = {0};    int len1 = strlen(s);    int len2 = strlen(t);    for(int i = 0; i &lt; 128; i++) ind[i] = len2 + 1; //默认倒数len + 1位    for(int i = 0; t[i]; i++) ind[t[i]] = len2 - i; //从头遍历，两个字符若相同，则会覆盖，最终值为最后出现的位置    //遍历    for(int i = 0; i &lt; len1 - len2 + 1; ) {        int flag = 1;        for(int j = 0; j &lt; len2; j++) {            if(t[j] == s[i + j]) continue;            i += ind[s[i + len2]];            flag = 0;            break;        }        if(flag) return i;    }    return -1;}int main() {    scanf("%s%s", text, pattern);    cout &lt;&lt; "sunday(" &lt;&lt; text &lt;&lt; ", " &lt;&lt; pattern &lt;&lt; ") = " &lt;&lt; sunday(text, pattern) &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 字符串匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim常用命令</title>
      <link href="/2022/05/05/vim-chang-yong-ming-ling/"/>
      <url>/2022/05/05/vim-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><p>　　vim是linux最常用的编辑器，必须要熟练掌握使用办法，方便以后快速修改配置文件。如果想学习linux，vim编辑器是必须会用的工具。</p><p>　　vim有3种常用模式：一般模式、编辑模式、命令模式。</p><h4 id="2、一般模式"><a href="#2、一般模式" class="headerlink" title="2、一般模式"></a>2、一般模式</h4><h5 id="（1）光标："><a href="#（1）光标：" class="headerlink" title="（1）光标："></a>（1）光标：</h5><p>　　上下左右:kjhl 也可以使用方向键</p><p>　　n+上下左右:n为数字，向上下左右移动n个字符</p><p>　　[ctrl]+f:屏幕向下滚动一页，同page down</p><p>　　[ctrl]+b:屏幕向上滚动一页，同page up</p><p>　　0或home:光标移动到行首</p><p>　　$或end:光标移动到行尾</p><p>　　G:光标移动到最后一行</p><p>　　gg:同1g，光标移动到第一行行首</p><p>　　ng:光标移动到第n行</p><p>​    　u:恢复前一个操作</p><p>　　[ctrl]+r:重做上一个操作</p><h5 id="（2）查找替换："><a href="#（2）查找替换：" class="headerlink" title="（2）查找替换："></a>（2）查找替换：</h5><p>　　/word:向下查找关键词，使用n或N向上或向下查找关键词</p><p>　　?word:向上查找关键词word，使用n或N向上或向下查找关键词</p><p>​        ：noh  取消高亮</p><p>　　:n1,n2s/word1/word2/g  :  s/1/2/g 表示将1替换成2，所以前面的意思是在n1到n2之间，将word1替换为word2.例如：51,100s/aaa/bbb/g</p><p>　　:1,$s/word1/word2/g : 全文查找替换将word1替换为word2</p><h5 id="（3）删除："><a href="#（3）删除：" class="headerlink" title="（3）删除："></a>（3）删除：</h5><p>　　x:向后删除</p><p>　　X:向前删除</p><p>　　nx:向后删除n个字符</p><p>　　dd:删除当前行　</p><p>　　ndd:向下删除n行</p><p>　　d1G:删除当前位置到第一行</p><h5 id="（4）复制，粘贴"><a href="#（4）复制，粘贴" class="headerlink" title="（4）复制，粘贴"></a>（4）复制，粘贴</h5><p>​        yy 复制当前行</p><p>​        v   从光标当前位置开始，光标所经过的地方会被选中，再按一下v结束。 </p><p>​        V   从光标当前行开始，光标经过的行都会被选中，再按一下Ｖ结束。 </p><p>​        ggVG 选中全部的文本， 其中gg为跳到行首，V选中整行，G末尾</p><p>​        选中后就可以用编辑命令对其进行编辑，如 </p><p>​        y  复制 （默认是复制到”寄存器） </p><p>​        p  粘贴 （默认从”寄存器取出内容粘贴） </p><p>​        “+y   复制到系统剪贴板(也就是vim的+寄存器） </p><p>​        “+p  从系统剪贴板粘贴 </p><h4 id="3、一般模式切换到编辑模式"><a href="#3、一般模式切换到编辑模式" class="headerlink" title="3、一般模式切换到编辑模式"></a>3、一般模式切换到编辑模式</h4><p>　　i:进入插入模式，在光标前插入  I是在第一个非空格符处插入</p><p>　　a:进入插入模式，在光标下一个字符插入 A是在所在行最后一个字符插入</p><p>　　o:进入插入模式，在下面一行插入  O是在上面一行出入</p><p>　　r:进入替换模式，类似于insert键</p><h4 id="4、一般模式到命令模式"><a href="#4、一般模式到命令模式" class="headerlink" title="4、一般模式到命令模式"></a>4、一般模式到命令模式</h4><p>　　:w 保存</p><p>　　:w! 强制保存</p><p>　　:q 退出</p><p>　　:q! 强制退出</p><p>　　:wq :x 保存并退出</p><p>　　ZZ 保存并退出</p><p>　　:set number 显示行号</p><p>　　:set nonu 取消显示行号</p><p>　　</p><h4 id="5、多文件编辑"><a href="#5、多文件编辑" class="headerlink" title="5、多文件编辑"></a>5、多文件编辑</h4><p>　　vim file1 file2可以同时打开两个文件</p><p>　　:n 编辑下一个文件</p><p>　　:N 编辑上一个文件</p><p>　　:file 列出这个vim打开的所有文件 </p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维费用的背包问题</title>
      <link href="/2022/04/25/er-wei-fei-yong-de-bei-bao-wen-ti/"/>
      <url>/2022/04/25/er-wei-fei-yong-de-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>二维费用的背包问题与01 背包很像，只不过实在 01 背包的基础上加上了一个条件限制。</p><p>01 背包的动态转移方程是</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">f[i][j] = f[i - 1][j] //不含if[i][j] = max(f[i][j], f[i - 1][j - v] + w); //含if[j] = max(f[j], f[j - v] + w) //优化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么这个多了个条件，那么可以再开一维，变成三维</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">f[i][j][k] = f[i - 1][j][k] //不含if[i][j][k] = max(f[i][j][k], f[i - 1][j - v1][k - v2] + w); //含if[j][k] = max(f[j][k, f[j - v1][k - v2] + w) //优化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>样例1：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">题目链接 ： https://www.acwing.com/problem/content/8/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 110;int n, V, M;int f[N][N];int main() {    cin &gt;&gt; n &gt;&gt; V &gt;&gt; M;        for(int i = 0; i &lt; n; i++) {        int v, m, w;        cin &gt;&gt; v &gt;&gt; m &gt;&gt; w;        for (int j = V; j &gt;= v; j -- )            for (int k = M; k &gt;= m; k -- )                f[j][k] = max(f[j][k], f[j - v][k - m] + w);    }    cout &lt;&lt; f[V][M] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>样例2：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">题目链接 ： https://www.acwing.com/problem/content/1024/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1010;int n, m, x;int f[N][N];int main() {    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;        for(int i = 0; i &lt; x; i++) {        int v1, v2;        cin &gt;&gt; v1 &gt;&gt; v2;        for (int j = n; j &gt;= v1; j -- )            for (int k = m - 1; k &gt;= v2; k -- )                f[j][k] = max(f[j][k], f[j - v1][k - v2] + 1);    }        cout &lt;&lt; f[n][m - 1] &lt;&lt; " ";    int k = m - 1;    while (k &gt; 0 &amp;&amp; f[n][k - 1] == f[n][m - 1]) k -- ;    cout &lt;&lt; m - k &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 背包九讲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题1.0</title>
      <link href="/2022/04/22/bei-bao-wen-ti-1-0/"/>
      <url>/2022/04/22/bei-bao-wen-ti-1-0/</url>
      
        <content type="html"><![CDATA[<p>0-1背包、完全背包、多重背包小结</p><h3 id="1、0-1背包"><a href="#1、0-1背包" class="headerlink" title="1、0~1背包"></a>1、0~1背包</h3><p>0~1背包，每种物品最多只能用一次，且只有两种状态：选与不选</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">集合f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>含义：从前i件物品中选择，总体积（或价值）不超过j<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">题目链接 ：https://www.acwing.com/problem/content/2/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>二维</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1010;int n, m; //n件物品， 容量为mint v[N], w[N]; //体积，价值int f[N][N]; //状态int main() {    cin &gt;&gt; n &gt;&gt; m;        for(int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];        //f[0][0] = 0;    for(int i = 1; i &lt;= n; i++)        for(int j = 0; j &lt;= m; j++) {            f[i][j] = f[i - 1][j]; //不含i            if(j &gt;= v[i]) f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]); //含i        }    cout &lt;&lt; f[n][m] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优化：一维</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i = 1; i &lt;= n; i++)        for(int j = 0; j &lt;= m; j++) {            f[i][j] = f[i - 1][j]; //不含i            if(j &gt;= v[i]) f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]);        }//直接删去一维for(int i = 1; i &lt;= n; i++)        for(int j = 0; j &lt;= m; j++) {            f[j] = f[j]; //不含i            if(j &gt;= v[i]) f[j] = max(f[j], f[j - v[i]] + w[i]);            //因为j - v[i] &lt; j, 所以在遍历f[j]之前就已经遍历过f[j - v[i]], f[j - v[i]]相当于f[i][j - v[i]]，而我们想要的是f[i - 1][j - v[i]],故如此优化并不正确        }//正确优化for(int i = 1; i &lt;= n; i++)        for(int j = m; j &gt;= v[i]; j--) {            f[j] = max(f[j], f[j - v[i]] + w[i]); //含i            //j从大到小遍历，j &gt; j - v[i], 所以遍历f[j]时f[j - v[i]]并没有被遍历，仍相当于f[i - 1][j - v[i]]        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1010;int n, m; //n件物品， 容量为mint v[N], w[N]; //体积，价值int f[N]; //状态int main() {    cin &gt;&gt; n &gt;&gt; m;        for(int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];           for(int i = 1; i &lt;= n; i++)        for(int j = m; j &gt;= v[i]; j--) {            f[j] = max(f[j], f[j - v[i]] + w[i]); //含i        }    cout &lt;&lt; f[m] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、完全背包"><a href="#2、完全背包" class="headerlink" title="2、完全背包"></a>2、完全背包</h3><p>完全背包问题，每件物品可以无限选择</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">集合f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>含义：从前i件物品中选择，总体积（或价值）不超过j<span class="token punctuation">(</span>注意：每件物品可无限制选择<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">题目链接 ： https://www.acwing.com/problem/content/3/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>二维</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1010;int n, m;int v[N], w[N];int f[N][N];int main() {    cin &gt;&gt; n &gt;&gt; m;    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];        for(int i = 1; i &lt;= n; i++)        for(int j = 0; j &lt;= m; j++)             for(int k = 0; k * v[i] &lt;= j; k++)                f[i][j] = max(f[i][j], f[i - 1][j - v[i] * k] + w[i] * k);        cout &lt;&lt; f[n][m] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优化二维</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1010;int n, m;int v[N], w[N];int f[N][N];int main() {    cin &gt;&gt; n &gt;&gt; m;    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];        for(int i = 1; i &lt;= n; i++)        for(int j = 0; j &lt;= m; j++) {            f[i][j] = f[i - 1][j];            if(j &gt;= v[i]) f[i][j] = max(f[i][j], f[i][j - v[i]] + w[i]);        }        cout &lt;&lt; f[n][m] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优化一维</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1010;int n, m;int v[N], w[N];int f[N];int main() {    cin &gt;&gt; n &gt;&gt; m;    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];        for(int i = 1; i &lt;= n; i++)        for(int j = v[i]; j &lt;= m; j++) {            f[j] = max(f[j], f[j - v[i]] + w[i]);        }        cout &lt;&lt; f[m] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、多重背包问题"><a href="#3、多重背包问题" class="headerlink" title="3、多重背包问题"></a>3、多重背包问题</h3><p>多重背包问题，可以理解成完全背包的进阶版，每种物品不再像完全背包问题一样可无限选择，而是最多选择s（s是有限的）件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">集合f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>含义：从前i件物品中选择，总体积（或价值）不超过j<span class="token punctuation">(</span>注意：每件物品最多选择s件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>暴力</strong></p><pre class="line-numbers language-none"><code class="language-none">题目链接 ：https://www.acwing.com/problem/content/4/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 110;int n, m;int v[N], w[N], s[N];int f[N][N];int main() {    cin &gt;&gt; n &gt;&gt; m;        for(int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];        for(int i = 1; i &lt;= n; i++)        for(int j = 0; j &lt;= m; j++)             for(int k = 0; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k++)                f[i][j] = max(f[i][j], f[i - 1][j - v[i] * k] + w[i] * k);                    cout &lt;&lt; f[n][m] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优化</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">题目链接 ： https://www.acwing.com/problem/content/5/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 25000, M = 2010;int n, m;int v[N], w[N];int f[N];int main() {    cin &gt;&gt; n &gt;&gt; m;        int cnt = 0;    for(int i = 1; i &lt;= n; i++) {        int a, b, s;        cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;        int k = 1;        while(k &lt;= s) {            cnt ++;            v[cnt] = a * k;            w[cnt] = b * k;            s -= k;            k *= 2;        }         if(s &gt; 0) {            cnt ++;            v[cnt] = a * s;            w[cnt] = b * s;        }    }        n = cnt;        for(int i = 1; i &lt;= n; i++)        for(int j = m; j &gt;= v[i]; j--)            f[j] = max(f[j], f[j - v[i]] + w[i]);                    cout &lt;&lt; f[m] &lt;&lt; endl;        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 背包九讲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL小结</title>
      <link href="/2022/04/21/stl-xiao-jie/"/>
      <url>/2022/04/21/stl-xiao-jie/</url>
      
        <content type="html"><![CDATA[<p>STL(standard template libaray-标准模板库)：<strong>是C++标准库的重要组成部分，不仅是一个可复用的组件库，而且是一个包括数据结构与算法的软件框架</strong></p><p>模板：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/*vector  变长数组，倍增的思想size() //返回个数empty() //返回是否为空clear() //清空string 字符串queue, priority_queue //队列， 优先队列（堆）stack //栈deque //双端队列set, map, multisrt, mulimap //基于平衡二叉树（红黑树）， 动态维护有序序列unordered_set, unordered_map, unordered_multiset, unordered_multimap //哈希表bitset // 压位， 位运算，位存储，状态压缩*/vector // 变长数组，倍增的思想    size()  //返回元素个数    empty()  //返回是否为空    clear()  //清空    front()//back()    push_back()//pop_back()    begin()/end()    []    支持比较运算，按字典序pair&lt;int, int&gt;    first, 第一个元素    second, 第二个元素    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）string，字符串    size()/length()  返回字符串长度    empty()    clear()    substr(起始下标，(子串长度))  返回子串    c_str()  返回字符串所在字符数组的起始地址queue, 队列    size()    empty()    push()  向队尾插入一个元素    front()  返回队头元素    back()  返回队尾元素    pop()  弹出队头元素priority_queue, 优先队列，默认是大根堆    size()    empty()    push()  插入一个元素    top()  返回堆顶元素    pop()  弹出堆顶元素    定义成小根堆的方式：priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;stack, 栈    size()    empty()    push()  向栈顶插入一个元素    top()  返回栈顶元素    pop()  弹出栈顶元素deque, 双端队列    size()    empty()    clear()    front()/back()    push_back()/pop_back()    push_front()/pop_front()    begin()/end()    []set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列    size()    empty()    clear()    begin()/end()    ++, -- 返回前驱和后继，时间复杂度 O(logn)    set/multiset        insert()  插入一个数        find()  查找一个数        count()  返回某一个数的个数        erase()            (1) 输入是一个数x，删除所有x   O(k + logn)            (2) 输入一个迭代器，删除这个迭代器        lower_bound()/upper_bound()            lower_bound(x)  返回大于等于x的最小的数的迭代器            upper_bound(x)  返回大于x的最小的数的迭代器    map/multimap        insert()  插入的数是一个pair        erase()  输入的参数是pair或者迭代器        find()        []  注意multimap不支持此操作。 时间复杂度是 O(logn)        lower_bound()/upper_bound()unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表    和上面类似，增删改查的时间复杂度是 O(1)    不支持 lower_bound()/upper_bound()， 迭代器的++，--bitset, 圧位    bitset&lt;10000&gt; s;    ~, &amp;, |, ^    &gt;&gt;, &lt;&lt;    ==, !=    []    count()  //返回有多少个1    any()  //判断是否至少有一个1    none()  //判断是否全为0    set()  //把所有位置成1    set(k, v)  //将第k位变成v    reset()  //把所有位变成0    flip()  //等价于~    flip(k) //把第k位取反<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/*************************************************************************        &gt; File Name: STL.cpp      &gt; Author: ChenChong      &gt; Mail: 2092518741@qq.com      &gt; Created Time: Thu Oct 28 18:39:20 2021 ************************************************************************//** vector  变长数组，倍增的思想*   size() //返回个数*   empty() //返回是否为空*   clear() //清空*   front() / back() //返回首个元素/末尾元素*   push_back() / pop_back() //尾部插入 / 删除*   begin() / end() //第一个数/ 最后一个数后面的一个数*   vector 支持随机寻址*   支持比较运算， 按字典序** pair&lt;int, int&gt; //存储二元组*   first 第一个元素*   second 第二个元素*   支持比较运算， 以first为第一关键字， 以second为第二关键字 （字典序）** string 字符串 substr(), c_str()*   size() / length()*   empty()*   clear()** queue,队列*   size()*   empty()*   push() 向队尾插入一个元素*   front() 返回队头元素*   back() 返回队尾元素*   pop() 弹出队头元素** priority_queue 优先队列（堆） 默认是大根堆*   //变为小根堆 priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;*   push() 插入一个元素*   top() 返回堆顶元素*   pop() 弹出堆顶元素*** stack //栈*   size()*   empty()*   push() 向栈顶插入一个元素*   top() 返回栈顶元素*   pop() 弹出栈顶元素** deque //双端队列*   size()*   empty()*   clear()*   front()*   back()*   push_back() / pop_back()*   push_front() / pop_front()*   支持随机寻址[]*   begin() / end()***set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列    size()    empty()    clear()    begin()/end()    ++, -- 返回前驱和后继，时间复杂度 O(logn)    set/multiset        insert()  插入一个数        find()  查找一个数        count()  返回某一个数的个数        erase()            (1) 输入是一个数x，删除所有x   O(k + logn)            (2) 输入一个迭代器，删除这个迭代器        lower_bound()/upper_bound()            lower_bound(x)  返回大于等于x的最小的数的迭代器            upper_bound(x)  返回大于x的最小的数的迭代器    map/multimap        insert()  插入的数是一个pair        erase()  输入的参数是pair或者迭代器        find()        []  注意multimap不支持此操作。 时间复杂度是 O(logn)        lower_bound()/upper_bound()unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表    和上面类似，增删改查的时间复杂度是 O(1)    不支持 lower_bound()/upper_bound()， 迭代器的++，--bitset, 圧位    bitset&lt;10000&gt; s;    ~, &amp;, |, ^    &gt;&gt;, &lt;&lt;    ==, !=    []    count()  //返回有多少个1    any()  //判断是否至少有一个1    none()  //判断是否全为0    set()  //把所有位置成1    set(k, v)  //将第k位变成v    reset()  //把所有位变成0    flip()  //等价于~    flip(k) //把第k位取反**/#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;cstdlib&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cstring&gt;#include &lt;deque&gt;#include &lt;stack&gt;#include &lt;set&gt;#include &lt;map&gt;using namespace std;int main() {//vector用法    cout &lt;&lt; "vector的用法： " &lt;&lt; endl;    vector&lt;int&gt; a;    vector&lt;int&gt; b(10);    vector&lt;int&gt; c(10, 3);    vector&lt;int&gt; d[10];    for(auto x : c) cout &lt;&lt; x &lt;&lt; " ";    cout &lt;&lt; endl;    a.size();// 长度    a.empty(); //判空    //时间复杂的O(1);    cout &lt;&lt; c.size() &lt;&lt; endl;    cout &lt;&lt; a.empty() &lt;&lt; endl; //空返回1；    cout &lt;&lt; c.empty() &lt;&lt; endl;    c.clear() ;    cout &lt;&lt; c.empty() &lt;&lt; endl;    cout &lt;&lt; "_________________________________________" &lt;&lt; endl;    for(int i = 0; i &lt; 10; i++) a.push_back(i);    for(int i = 0; i &lt; a.size(); i++) cout &lt;&lt; a[i] &lt;&lt; " ";    cout &lt;&lt; endl;    //迭代器    for(vector&lt;int&gt;::iterator i = a.begin(); i != a.end(); i++) cout &lt;&lt; *i &lt;&lt; " ";    cout &lt;&lt; endl;    for(auto x : a) cout &lt;&lt; x &lt;&lt; " ";    cout &lt;&lt; endl;    cout &lt;&lt; "_________________________________________" &lt;&lt; endl;    cout &lt;&lt; a.front() &lt;&lt; " " &lt;&lt; a.back() &lt;&lt; endl;    a.push_back(10);    for(int i = 0; i &lt; a.size(); i++) cout &lt;&lt; a[i] &lt;&lt; " ";    cout &lt;&lt; endl;    a.pop_back();    for(int i = 0; i &lt; a.size(); i++) cout &lt;&lt; a[i] &lt;&lt; " ";    cout &lt;&lt; endl;    vector&lt;int&gt; a1(4, 3);    vector&lt;int&gt; b1(3, 4);    if(a1 &lt; b1) puts("a1 &lt; b1");    cout &lt;&lt; "_________________________________________" &lt;&lt; endl;    cout &lt;&lt; "pair的用法： " &lt;&lt; endl;    pair&lt;int, string&gt;p;    pair&lt;int, pair&lt;int, int&gt;&gt;p2;    p = make_pair(10, "niubi");    p = {20, "abc"};    cout &lt;&lt; "string的用法： " &lt;&lt; endl;    string str = "nibbi";    str += "/do";    str += "/dd";    cout &lt;&lt; str &lt;&lt; endl;    cout &lt;&lt; str.substr(1) &lt;&lt; endl;    cout &lt;&lt; str.substr(1, 3) &lt;&lt; endl;    printf("%s\n", str.c_str());    set&lt;int&gt; S; //不能有重复元素    multiset&lt;int&gt; MS; //可以有重复元素    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C++语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
